

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Mon Jun 26 19:05:23 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    24   000000                     
    25                           ; Version 2.40
    26                           ; Generated 17/11/2021 GMT
    27                           ; 
    28                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60   000000                     _OSCCONbits	set	4051
    61   000000                     _LATD	set	3980
    62   000000                     _TRISD	set	3989
    63   000000                     _OSCCON	set	4051
    64                           
    65                           	psect	smallconst
    66   000800                     __psmallconst:
    67                           	callstack 0
    68   000800  00                 	db	0
    69   000801                     STR_1:
    70   000801  50                 	db	80	;'P'
    71   000802  57                 	db	87	;'W'
    72   000803  4D                 	db	77	;'M'
    73   000804  20                 	db	32
    74   000805  2D                 	db	45
    75   000806  20                 	db	32
    76   000807  4D                 	db	77	;'M'
    77   000808  4F                 	db	79	;'O'
    78   000809  54                 	db	84	;'T'
    79   00080A  4F                 	db	79	;'O'
    80   00080B  52                 	db	82	;'R'
    81   00080C  00                 	db	0
    82   00080D  00                 	db	0	; dummy byte at the end
    83   000000                     
    84                           ; #config settings
    85                           
    86                           	psect	cinit
    87   000960                     __pcinit:
    88                           	callstack 0
    89   000960                     start_initialization:
    90                           	callstack 0
    91   000960                     __initialization:
    92                           	callstack 0
    93   000960                     end_of_initialization:
    94                           	callstack 0
    95   000960                     __end_of__initialization:
    96                           	callstack 0
    97   000960  900B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    98   000962  920B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    99   000964  0E00               	movlw	low (__Lsmallconst shr (0+16))
   100   000966  6EF8               	movwf	tblptru,c
   101   000968  0E08               	movlw	high __Lsmallconst
   102   00096A  6EF7               	movwf	tblptrh,c
   103   00096C  0100               	movlb	0
   104   00096E  EF9C  F004         	goto	_main	;jump to C main() function
   105                           
   106                           	psect	cstackCOMRAM
   107   000001                     __pcstackCOMRAM:
   108                           	callstack 0
   109   000001                     ??_FM_Lcd_Send_Nibble:
   110   000001                     
   111                           ; 2 bytes @ 0x0
   112   000001                     	ds	1
   113   000002                     FM_Lcd_Send_Nibble@byte_to_send:
   114                           	callstack 0
   115                           
   116                           ; 1 bytes @ 0x1
   117   000002                     	ds	1
   118   000003                     FM_Lcd_Send_Nibble@upper_bits:
   119                           	callstack 0
   120                           
   121                           ; 1 bytes @ 0x2
   122   000003                     	ds	1
   123   000004                     FM_Lcd_Send_Nibble@lower_bits:
   124                           	callstack 0
   125                           
   126                           ; 1 bytes @ 0x3
   127   000004                     	ds	1
   128   000005                     FM_Lcd_Send_Command@command_to_send:
   129                           	callstack 0
   130   000005                     FM_Lcd_Send_Character@character_to_send:
   131                           	callstack 0
   132                           
   133                           ; 1 bytes @ 0x4
   134   000005                     	ds	1
   135   000006                     FM_Lcd_Set_Cursor@columna:
   136                           	callstack 0
   137   000006                     FM_Lcd_Send_String@cadena:
   138                           	callstack 0
   139                           
   140                           ; 2 bytes @ 0x5
   141   000006                     	ds	1
   142   000007                     FM_Lcd_Set_Cursor@filas:
   143                           	callstack 0
   144                           
   145                           ; 1 bytes @ 0x6
   146   000007                     	ds	1
   147   000008                     ??_FM_Lcd_Send_String:
   148   000008                     FM_Lcd_Set_Cursor@base_pos:
   149                           	callstack 0
   150                           
   151                           ; 1 bytes @ 0x7
   152   000008                     	ds	2
   153   00000A                     FM_Lcd_Send_String@index:
   154                           	callstack 0
   155                           
   156                           ; 1 bytes @ 0x9
   157   00000A                     	ds	1
   158   00000B                     
   159                           ; 1 bytes @ 0xA
   160 ;;
   161 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   162 ;;
   163 ;; *************** function _main *****************
   164 ;; Defined at:
   165 ;;		line 33 in file "main.c"
   166 ;; Parameters:    Size  Location     Type
   167 ;;		None
   168 ;; Auto vars:     Size  Location     Type
   169 ;;		None
   170 ;; Return value:  Size  Location     Type
   171 ;;                  2   23[None  ] int 
   172 ;; Registers used:
   173 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   174 ;; Tracked objects:
   175 ;;		On entry : 0/0
   176 ;;		On exit  : 0/0
   177 ;;		Unchanged: 0/0
   178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   179 ;;      Params:         0       0       0       0       0       0       0       0       0
   180 ;;      Locals:         0       0       0       0       0       0       0       0       0
   181 ;;      Temps:          0       0       0       0       0       0       0       0       0
   182 ;;      Totals:         0       0       0       0       0       0       0       0       0
   183 ;;Total ram usage:        0 bytes
   184 ;; Hardware stack levels required when called: 4
   185 ;; This function calls:
   186 ;;		_FM_Lcd_Easy_Init
   187 ;;		_FM_Lcd_Send_String
   188 ;;		_FM_Lcd_Set_Cursor
   189 ;;		_Init_Internal_Oscillator
   190 ;; This function is called by:
   191 ;;		Startup code after reset
   192 ;; This function uses a non-reentrant model
   193 ;;
   194                           
   195                           	psect	text0
   196   000938                     __ptext0:
   197                           	callstack 0
   198   000938                     _main:
   199                           	callstack 27
   200   000938                     
   201                           ;main.c: 36:     Init_Internal_Oscillator();
   202   000938  ECB9  F004         	call	_Init_Internal_Oscillator	;wreg free
   203   00093C                     
   204                           ;main.c: 38:     FM_Lcd_Easy_Init();
   205   00093C  EC87  F004         	call	_FM_Lcd_Easy_Init	;wreg free
   206   000940                     
   207                           ;main.c: 40:     FM_Lcd_Set_Cursor(ROW_1, COL_4);
   208   000940  0E03               	movlw	3
   209   000942  6E06               	movwf	FM_Lcd_Set_Cursor@columna^0,c
   210   000944  0E00               	movlw	0
   211   000946  EC65  F004         	call	_FM_Lcd_Set_Cursor
   212   00094A                     
   213                           ;main.c: 41:     FM_Lcd_Send_String("PWM - MOTOR");
   214   00094A  0E01               	movlw	low STR_1
   215   00094C  6E06               	movwf	FM_Lcd_Send_String@cadena^0,c
   216   00094E  0E08               	movlw	high STR_1
   217   000950  6E07               	movwf	(FM_Lcd_Send_String@cadena+1)^0,c
   218   000952  EC3D  F004         	call	_FM_Lcd_Send_String	;wreg free
   219   000956                     l842:
   220                           
   221                           ;main.c: 44:     {;main.c: 45:         __nop();
   222   000956  F000               	nop	
   223   000958  EFAB  F004         	goto	l842
   224   00095C  EF07  F000         	goto	start
   225   000960                     __end_of_main:
   226                           	callstack 0
   227                           
   228 ;; *************** function _Init_Internal_Oscillator *****************
   229 ;; Defined at:
   230 ;;		line 52 in file "main.c"
   231 ;; Parameters:    Size  Location     Type
   232 ;;		None
   233 ;; Auto vars:     Size  Location     Type
   234 ;;		None
   235 ;; Return value:  Size  Location     Type
   236 ;;                  1    wreg      void 
   237 ;; Registers used:
   238 ;;		wreg, status,2
   239 ;; Tracked objects:
   240 ;;		On entry : 0/0
   241 ;;		On exit  : 0/0
   242 ;;		Unchanged: 0/0
   243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   244 ;;      Params:         0       0       0       0       0       0       0       0       0
   245 ;;      Locals:         0       0       0       0       0       0       0       0       0
   246 ;;      Temps:          0       0       0       0       0       0       0       0       0
   247 ;;      Totals:         0       0       0       0       0       0       0       0       0
   248 ;;Total ram usage:        0 bytes
   249 ;; Hardware stack levels used: 1
   250 ;; Hardware stack levels required when called: 1
   251 ;; This function calls:
   252 ;;		Nothing
   253 ;; This function is called by:
   254 ;;		_main
   255 ;; This function uses a non-reentrant model
   256 ;;
   257                           
   258                           	psect	text1
   259   000972                     __ptext1:
   260                           	callstack 0
   261   000972                     _Init_Internal_Oscillator:
   262                           	callstack 29
   263   000972                     
   264                           ;main.c: 55:     OSCCON = 0x00;
   265   000972  0E00               	movlw	0
   266   000974  6ED3               	movwf	211,c	;volatile
   267                           
   268                           ;main.c: 58:     OSCCONbits.IRCF = 0b111;
   269   000976  0E70               	movlw	112
   270   000978  12D3               	iorwf	211,f,c	;volatile
   271                           
   272                           ;main.c: 59:     OSCCONbits.SCS = 0b11;
   273   00097A  0E03               	movlw	3
   274   00097C  12D3               	iorwf	211,f,c	;volatile
   275   00097E  0012               	return		;funcret
   276   000980                     __end_of_Init_Internal_Oscillator:
   277                           	callstack 0
   278                           
   279 ;; *************** function _FM_Lcd_Set_Cursor *****************
   280 ;; Defined at:
   281 ;;		line 62 in file "FM_LCD16X2_Easy.c"
   282 ;; Parameters:    Size  Location     Type
   283 ;;  filas           1    wreg     enum E3201
   284 ;;  columna         1    5[COMRAM] enum E3205
   285 ;; Auto vars:     Size  Location     Type
   286 ;;  filas           1    6[COMRAM] enum E3201
   287 ;;  base_pos        1    7[COMRAM] unsigned char 
   288 ;; Return value:  Size  Location     Type
   289 ;;                  1    wreg      void 
   290 ;; Registers used:
   291 ;;		wreg, status,2, status,0, cstack
   292 ;; Tracked objects:
   293 ;;		On entry : 0/0
   294 ;;		On exit  : 0/0
   295 ;;		Unchanged: 0/0
   296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   297 ;;      Params:         1       0       0       0       0       0       0       0       0
   298 ;;      Locals:         2       0       0       0       0       0       0       0       0
   299 ;;      Temps:          0       0       0       0       0       0       0       0       0
   300 ;;      Totals:         3       0       0       0       0       0       0       0       0
   301 ;;Total ram usage:        3 bytes
   302 ;; Hardware stack levels used: 1
   303 ;; Hardware stack levels required when called: 3
   304 ;; This function calls:
   305 ;;		_FM_Lcd_Send_Command
   306 ;; This function is called by:
   307 ;;		_main
   308 ;; This function uses a non-reentrant model
   309 ;;
   310                           
   311                           	psect	text2
   312   0008CA                     __ptext2:
   313                           	callstack 0
   314   0008CA                     _FM_Lcd_Set_Cursor:
   315                           	callstack 27
   316                           
   317                           ;incstack = 0
   318                           ;FM_Lcd_Set_Cursor@filas stored from wreg
   319   0008CA  6E07               	movwf	FM_Lcd_Set_Cursor@filas^0,c
   320   0008CC                     
   321                           ;FM_LCD16X2_Easy.c: 62: void FM_Lcd_Set_Cursor (_row_lcd_t filas, _column_lcd_t columna)
      +                          ;FM_LCD16X2_Easy.c: 63: {;FM_LCD16X2_Easy.c: 64:     char base_pos = 0x00;
   322   0008CC  0E00               	movlw	0
   323   0008CE  6E08               	movwf	FM_Lcd_Set_Cursor@base_pos^0,c
   324   0008D0                     
   325                           ;FM_LCD16X2_Easy.c: 65:     if(filas == ROW_1)
   326   0008D0  5007               	movf	FM_Lcd_Set_Cursor@filas^0,w,c
   327   0008D2  A4D8               	btfss	status,2,c
   328   0008D4  EF6E  F004         	goto	u41
   329   0008D8  EF70  F004         	goto	u40
   330   0008DC                     u41:
   331   0008DC  EF74  F004         	goto	l816
   332   0008E0                     u40:
   333   0008E0                     
   334                           ;FM_LCD16X2_Easy.c: 66:     {;FM_LCD16X2_Easy.c: 67:         base_pos = 0x80;
   335   0008E0  0E80               	movlw	128
   336   0008E2  6E08               	movwf	FM_Lcd_Set_Cursor@base_pos^0,c
   337                           
   338                           ;FM_LCD16X2_Easy.c: 68:     }
   339   0008E4  EF81  F004         	goto	l820
   340   0008E8                     l816:
   341   0008E8  0407               	decf	FM_Lcd_Set_Cursor@filas^0,w,c
   342   0008EA  A4D8               	btfss	status,2,c
   343   0008EC  EF7A  F004         	goto	u51
   344   0008F0  EF7C  F004         	goto	u50
   345   0008F4                     u51:
   346   0008F4  EF80  F004         	goto	l61
   347   0008F8                     u50:
   348   0008F8                     
   349                           ;FM_LCD16X2_Easy.c: 70:     {;FM_LCD16X2_Easy.c: 71:         base_pos = 0xC0;
   350   0008F8  0EC0               	movlw	192
   351   0008FA  6E08               	movwf	FM_Lcd_Set_Cursor@base_pos^0,c
   352                           
   353                           ;FM_LCD16X2_Easy.c: 72:     }
   354   0008FC  EF81  F004         	goto	l820
   355   000900                     l61:
   356                           
   357                           ;FM_LCD16X2_Easy.c: 74:     {;FM_LCD16X2_Easy.c: 75:         __nop();
   358   000900  F000               	nop	
   359   000902                     l820:
   360                           
   361                           ;FM_LCD16X2_Easy.c: 79:     base_pos += columna;
   362   000902  5006               	movf	FM_Lcd_Set_Cursor@columna^0,w,c
   363   000904  2608               	addwf	FM_Lcd_Set_Cursor@base_pos^0,f,c
   364   000906                     
   365                           ;FM_LCD16X2_Easy.c: 80:     FM_Lcd_Send_Command(base_pos);
   366   000906  5008               	movf	FM_Lcd_Set_Cursor@base_pos^0,w,c
   367   000908  ECC6  F004         	call	_FM_Lcd_Send_Command
   368   00090C  0012               	return		;funcret
   369   00090E                     __end_of_FM_Lcd_Set_Cursor:
   370                           	callstack 0
   371                           
   372 ;; *************** function _FM_Lcd_Send_String *****************
   373 ;; Defined at:
   374 ;;		line 52 in file "FM_LCD16X2_Easy.c"
   375 ;; Parameters:    Size  Location     Type
   376 ;;  cadena          2    5[COMRAM] PTR unsigned char 
   377 ;;		 -> STR_1(12), 
   378 ;; Auto vars:     Size  Location     Type
   379 ;;  index           1    9[COMRAM] unsigned char 
   380 ;; Return value:  Size  Location     Type
   381 ;;                  1    wreg      void 
   382 ;; Registers used:
   383 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   384 ;; Tracked objects:
   385 ;;		On entry : 0/0
   386 ;;		On exit  : 0/0
   387 ;;		Unchanged: 0/0
   388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   389 ;;      Params:         2       0       0       0       0       0       0       0       0
   390 ;;      Locals:         1       0       0       0       0       0       0       0       0
   391 ;;      Temps:          2       0       0       0       0       0       0       0       0
   392 ;;      Totals:         5       0       0       0       0       0       0       0       0
   393 ;;Total ram usage:        5 bytes
   394 ;; Hardware stack levels used: 1
   395 ;; Hardware stack levels required when called: 3
   396 ;; This function calls:
   397 ;;		_FM_Lcd_Send_Character
   398 ;; This function is called by:
   399 ;;		_main
   400 ;; This function uses a non-reentrant model
   401 ;;
   402                           
   403                           	psect	text3
   404   00087A                     __ptext3:
   405                           	callstack 0
   406   00087A                     _FM_Lcd_Send_String:
   407                           	callstack 27
   408   00087A                     
   409                           ;FM_LCD16X2_Easy.c: 52: void FM_Lcd_Send_String (char *cadena);FM_LCD16X2_Easy.c: 53: {;
      +                          FM_LCD16X2_Easy.c: 54:     uint8_t index = 0;
   410   00087A  0E00               	movlw	0
   411   00087C  6E0A               	movwf	FM_Lcd_Send_String@index^0,c
   412                           
   413                           ;FM_LCD16X2_Easy.c: 55:     while(cadena[index] != '\0')
   414   00087E  EF50  F004         	goto	l832
   415   000882                     l828:
   416                           
   417                           ;FM_LCD16X2_Easy.c: 56:     {;FM_LCD16X2_Easy.c: 57:         FM_Lcd_Send_Character(caden
      +                          a[index]);
   418   000882  500A               	movf	FM_Lcd_Send_String@index^0,w,c
   419   000884  2406               	addwf	FM_Lcd_Send_String@cadena^0,w,c
   420   000886  6E08               	movwf	??_FM_Lcd_Send_String^0,c
   421   000888  0E00               	movlw	0
   422   00088A  2007               	addwfc	(FM_Lcd_Send_String@cadena+1)^0,w,c
   423   00088C  6E09               	movwf	(??_FM_Lcd_Send_String+1)^0,c
   424   00088E  C008  FFF6         	movff	??_FM_Lcd_Send_String,tblptrl
   425   000892  C009  FFF7         	movff	??_FM_Lcd_Send_String+1,tblptrh
   426   000896                     	if	0	;tblptru may be non-zero
   427   000896                     	endif
   428   000896                     	if	0	;tblptru may be non-zero
   429   000896                     	endif
   430   000896  0008               	tblrd		*
   431   000898  50F5               	movf	tablat,w,c
   432   00089A  ECC0  F004         	call	_FM_Lcd_Send_Character
   433   00089E                     
   434                           ;FM_LCD16X2_Easy.c: 58:         index++;
   435   00089E  2A0A               	incf	FM_Lcd_Send_String@index^0,f,c
   436   0008A0                     l832:
   437                           
   438                           ;FM_LCD16X2_Easy.c: 55:     while(cadena[index] != '\0')
   439   0008A0  500A               	movf	FM_Lcd_Send_String@index^0,w,c
   440   0008A2  2406               	addwf	FM_Lcd_Send_String@cadena^0,w,c
   441   0008A4  6E08               	movwf	??_FM_Lcd_Send_String^0,c
   442   0008A6  0E00               	movlw	0
   443   0008A8  2007               	addwfc	(FM_Lcd_Send_String@cadena+1)^0,w,c
   444   0008AA  6E09               	movwf	(??_FM_Lcd_Send_String+1)^0,c
   445   0008AC  C008  FFF6         	movff	??_FM_Lcd_Send_String,tblptrl
   446   0008B0  C009  FFF7         	movff	??_FM_Lcd_Send_String+1,tblptrh
   447   0008B4                     	if	0	;tblptru may be non-zero
   448   0008B4                     	endif
   449   0008B4                     	if	0	;tblptru may be non-zero
   450   0008B4                     	endif
   451   0008B4  0008               	tblrd		*
   452   0008B6  50F5               	movf	tablat,w,c
   453   0008B8  0900               	iorlw	0
   454   0008BA  A4D8               	btfss	status,2,c
   455   0008BC  EF62  F004         	goto	u61
   456   0008C0  EF64  F004         	goto	u60
   457   0008C4                     u61:
   458   0008C4  EF41  F004         	goto	l828
   459   0008C8                     u60:
   460   0008C8  0012               	return		;funcret
   461   0008CA                     __end_of_FM_Lcd_Send_String:
   462                           	callstack 0
   463                           
   464 ;; *************** function _FM_Lcd_Send_Character *****************
   465 ;; Defined at:
   466 ;;		line 45 in file "FM_LCD16X2_Easy.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;  character_to    1    wreg     unsigned char 
   469 ;; Auto vars:     Size  Location     Type
   470 ;;  character_to    1    4[COMRAM] unsigned char 
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      void 
   473 ;; Registers used:
   474 ;;		wreg, status,2, status,0, cstack
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   480 ;;      Params:         0       0       0       0       0       0       0       0       0
   481 ;;      Locals:         1       0       0       0       0       0       0       0       0
   482 ;;      Temps:          0       0       0       0       0       0       0       0       0
   483 ;;      Totals:         1       0       0       0       0       0       0       0       0
   484 ;;Total ram usage:        1 bytes
   485 ;; Hardware stack levels used: 1
   486 ;; Hardware stack levels required when called: 2
   487 ;; This function calls:
   488 ;;		_FM_Lcd_Send_Nibble
   489 ;; This function is called by:
   490 ;;		_FM_Lcd_Send_String
   491 ;; This function uses a non-reentrant model
   492 ;;
   493                           
   494                           	psect	text4
   495   000980                     __ptext4:
   496                           	callstack 0
   497   000980                     _FM_Lcd_Send_Character:
   498                           	callstack 27
   499                           
   500                           ;incstack = 0
   501                           ;FM_Lcd_Send_Character@character_to_send stored from wreg
   502   000980  6E05               	movwf	FM_Lcd_Send_Character@character_to_send^0,c
   503   000982                     
   504                           ;FM_LCD16X2_Easy.c: 45: void FM_Lcd_Send_Character (char character_to_send);FM_LCD16X2_E
      +                          asy.c: 46: {;FM_LCD16X2_Easy.c: 47:     LATD |= (1 << 0);;
   505   000982  808C               	bsf	140,0,c	;volatile
   506   000984                     
   507                           ;FM_LCD16X2_Easy.c: 48:     FM_Lcd_Send_Nibble(character_to_send);
   508   000984  5005               	movf	FM_Lcd_Send_Character@character_to_send^0,w,c
   509   000986  EC07  F004         	call	_FM_Lcd_Send_Nibble
   510   00098A  0012               	return		;funcret
   511   00098C                     __end_of_FM_Lcd_Send_Character:
   512                           	callstack 0
   513                           
   514 ;; *************** function _FM_Lcd_Easy_Init *****************
   515 ;; Defined at:
   516 ;;		line 84 in file "FM_LCD16X2_Easy.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;		None
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		wreg, status,2, status,0, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   530 ;;      Params:         0       0       0       0       0       0       0       0       0
   531 ;;      Locals:         0       0       0       0       0       0       0       0       0
   532 ;;      Temps:          0       0       0       0       0       0       0       0       0
   533 ;;      Totals:         0       0       0       0       0       0       0       0       0
   534 ;;Total ram usage:        0 bytes
   535 ;; Hardware stack levels used: 1
   536 ;; Hardware stack levels required when called: 3
   537 ;; This function calls:
   538 ;;		_FM_Lcd_Easy_Gpio_Init
   539 ;;		_FM_Lcd_Send_Command
   540 ;; This function is called by:
   541 ;;		_main
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           	psect	text5
   546   00090E                     __ptext5:
   547                           	callstack 0
   548   00090E                     _FM_Lcd_Easy_Init:
   549                           	callstack 27
   550   00090E                     
   551                           ;FM_LCD16X2_Easy.c: 86:     FM_Lcd_Easy_Gpio_Init();
   552   00090E  ECCC  F004         	call	_FM_Lcd_Easy_Gpio_Init	;wreg free
   553                           
   554                           ;FM_LCD16X2_Easy.c: 88:     FM_Lcd_Send_Command(0x01);
   555   000912  0E01               	movlw	1
   556   000914  ECC6  F004         	call	_FM_Lcd_Send_Command
   557                           
   558                           ;FM_LCD16X2_Easy.c: 89:     FM_Lcd_Send_Command(0x02);
   559   000918  0E02               	movlw	2
   560   00091A  ECC6  F004         	call	_FM_Lcd_Send_Command
   561                           
   562                           ;FM_LCD16X2_Easy.c: 90:     FM_Lcd_Send_Command(0x06);
   563   00091E  0E06               	movlw	6
   564   000920  ECC6  F004         	call	_FM_Lcd_Send_Command
   565                           
   566                           ;FM_LCD16X2_Easy.c: 91:     FM_Lcd_Send_Command(0x0C);
   567   000924  0E0C               	movlw	12
   568   000926  ECC6  F004         	call	_FM_Lcd_Send_Command
   569                           
   570                           ;FM_LCD16X2_Easy.c: 92:     FM_Lcd_Send_Command(0x10);
   571   00092A  0E10               	movlw	16
   572   00092C  ECC6  F004         	call	_FM_Lcd_Send_Command
   573                           
   574                           ;FM_LCD16X2_Easy.c: 93:     FM_Lcd_Send_Command(0x2C);
   575   000930  0E2C               	movlw	44
   576   000932  ECC6  F004         	call	_FM_Lcd_Send_Command
   577   000936  0012               	return		;funcret
   578   000938                     __end_of_FM_Lcd_Easy_Init:
   579                           	callstack 0
   580                           
   581 ;; *************** function _FM_Lcd_Send_Command *****************
   582 ;; Defined at:
   583 ;;		line 39 in file "FM_LCD16X2_Easy.c"
   584 ;; Parameters:    Size  Location     Type
   585 ;;  command_to_s    1    wreg     unsigned char 
   586 ;; Auto vars:     Size  Location     Type
   587 ;;  command_to_s    1    4[COMRAM] unsigned char 
   588 ;; Return value:  Size  Location     Type
   589 ;;                  1    wreg      void 
   590 ;; Registers used:
   591 ;;		wreg, status,2, status,0, cstack
   592 ;; Tracked objects:
   593 ;;		On entry : 0/0
   594 ;;		On exit  : 0/0
   595 ;;		Unchanged: 0/0
   596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   597 ;;      Params:         0       0       0       0       0       0       0       0       0
   598 ;;      Locals:         1       0       0       0       0       0       0       0       0
   599 ;;      Temps:          0       0       0       0       0       0       0       0       0
   600 ;;      Totals:         1       0       0       0       0       0       0       0       0
   601 ;;Total ram usage:        1 bytes
   602 ;; Hardware stack levels used: 1
   603 ;; Hardware stack levels required when called: 2
   604 ;; This function calls:
   605 ;;		_FM_Lcd_Send_Nibble
   606 ;; This function is called by:
   607 ;;		_FM_Lcd_Set_Cursor
   608 ;;		_FM_Lcd_Easy_Init
   609 ;; This function uses a non-reentrant model
   610 ;;
   611                           
   612                           	psect	text6
   613   00098C                     __ptext6:
   614                           	callstack 0
   615   00098C                     _FM_Lcd_Send_Command:
   616                           	callstack 27
   617                           
   618                           ;incstack = 0
   619                           ;FM_Lcd_Send_Command@command_to_send stored from wreg
   620   00098C  6E05               	movwf	FM_Lcd_Send_Command@command_to_send^0,c
   621   00098E                     
   622                           ;FM_LCD16X2_Easy.c: 39: void FM_Lcd_Send_Command (char command_to_send);FM_LCD16X2_Easy.
      +                          c: 40: {;FM_LCD16X2_Easy.c: 41:     LATD &= ~(1 << 0);;
   623   00098E  908C               	bcf	140,0,c	;volatile
   624   000990                     
   625                           ;FM_LCD16X2_Easy.c: 42:     FM_Lcd_Send_Nibble(command_to_send);
   626   000990  5005               	movf	FM_Lcd_Send_Command@command_to_send^0,w,c
   627   000992  EC07  F004         	call	_FM_Lcd_Send_Nibble
   628   000996  0012               	return		;funcret
   629   000998                     __end_of_FM_Lcd_Send_Command:
   630                           	callstack 0
   631                           
   632 ;; *************** function _FM_Lcd_Send_Nibble *****************
   633 ;; Defined at:
   634 ;;		line 19 in file "FM_LCD16X2_Easy.c"
   635 ;; Parameters:    Size  Location     Type
   636 ;;  byte_to_send    1    wreg     unsigned char 
   637 ;; Auto vars:     Size  Location     Type
   638 ;;  byte_to_send    1    1[COMRAM] unsigned char 
   639 ;;  lower_bits      1    3[COMRAM] unsigned char 
   640 ;;  upper_bits      1    2[COMRAM] unsigned char 
   641 ;; Return value:  Size  Location     Type
   642 ;;                  1    wreg      void 
   643 ;; Registers used:
   644 ;;		wreg, status,2, status,0
   645 ;; Tracked objects:
   646 ;;		On entry : 0/0
   647 ;;		On exit  : 0/0
   648 ;;		Unchanged: 0/0
   649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   650 ;;      Params:         0       0       0       0       0       0       0       0       0
   651 ;;      Locals:         3       0       0       0       0       0       0       0       0
   652 ;;      Temps:          1       0       0       0       0       0       0       0       0
   653 ;;      Totals:         4       0       0       0       0       0       0       0       0
   654 ;;Total ram usage:        4 bytes
   655 ;; Hardware stack levels used: 1
   656 ;; Hardware stack levels required when called: 1
   657 ;; This function calls:
   658 ;;		Nothing
   659 ;; This function is called by:
   660 ;;		_FM_Lcd_Send_Command
   661 ;;		_FM_Lcd_Send_Character
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           	psect	text7
   666   00080E                     __ptext7:
   667                           	callstack 0
   668   00080E                     _FM_Lcd_Send_Nibble:
   669                           	callstack 27
   670                           
   671                           ;incstack = 0
   672                           ;FM_Lcd_Send_Nibble@byte_to_send stored from wreg
   673   00080E  6E02               	movwf	FM_Lcd_Send_Nibble@byte_to_send^0,c
   674   000810                     
   675                           ;FM_LCD16X2_Easy.c: 19: void FM_Lcd_Send_Nibble (char byte_to_send);FM_LCD16X2_Easy.c: 2
      +                          0: {;FM_LCD16X2_Easy.c: 21:     char upper_bits, lower_bits;;FM_LCD16X2_Easy.c: 23:     
      +                          upper_bits = (byte_to_send & 0xF0);
   676   000810  5002               	movf	FM_Lcd_Send_Nibble@byte_to_send^0,w,c
   677   000812  0BF0               	andlw	240
   678   000814  6E03               	movwf	FM_Lcd_Send_Nibble@upper_bits^0,c
   679                           
   680                           ;FM_LCD16X2_Easy.c: 24:     lower_bits = (byte_to_send & 0x0F) << 4;
   681   000816  C002  F001         	movff	FM_Lcd_Send_Nibble@byte_to_send,??_FM_Lcd_Send_Nibble
   682   00081A  0E0F               	movlw	15
   683   00081C  1601               	andwf	??_FM_Lcd_Send_Nibble^0,f,c
   684   00081E  3801               	swapf	??_FM_Lcd_Send_Nibble^0,w,c
   685   000820  0BF0               	andlw	240
   686   000822  6E04               	movwf	FM_Lcd_Send_Nibble@lower_bits^0,c
   687                           
   688                           ;FM_LCD16X2_Easy.c: 30:     LATD |= upper_bits;
   689   000824  5003               	movf	FM_Lcd_Send_Nibble@upper_bits^0,w,c	;volatile
   690   000826  128C               	iorwf	140,f,c	;volatile
   691   000828                     
   692                           ;FM_LCD16X2_Easy.c: 31:     LATD |= (1 << 2);; _delay((unsigned long)((1)*(8000000/4000.
      +                          0))); LATD &= ~(1 << 2);; _delay((unsigned long)((1)*(8000000/4000.0)));;
   693   000828  848C               	bsf	140,2,c	;volatile
   694   00082A  0E03               	movlw	3
   695   00082C  6E01               	movwf	??_FM_Lcd_Send_Nibble^0,c
   696   00082E  0E98               	movlw	152
   697   000830                     u77:
   698   000830  2EE8               	decfsz	wreg,f,c
   699   000832  D7FE               	bra	u77
   700   000834  2E01               	decfsz	??_FM_Lcd_Send_Nibble^0,f,c
   701   000836  D7FC               	bra	u77
   702   000838  948C               	bcf	140,2,c	;volatile
   703   00083A  0E03               	movlw	3
   704   00083C  6E01               	movwf	??_FM_Lcd_Send_Nibble^0,c
   705   00083E  0E98               	movlw	152
   706   000840                     u87:
   707   000840  2EE8               	decfsz	wreg,f,c
   708   000842  D7FE               	bra	u87
   709   000844  2E01               	decfsz	??_FM_Lcd_Send_Nibble^0,f,c
   710   000846  D7FC               	bra	u87
   711   000848                     
   712                           ;FM_LCD16X2_Easy.c: 32:     LATD &= ~upper_bits;
   713   000848  5003               	movf	FM_Lcd_Send_Nibble@upper_bits^0,w,c	;volatile
   714   00084A  0AFF               	xorlw	255
   715   00084C  168C               	andwf	140,f,c	;volatile
   716   00084E                     
   717                           ;FM_LCD16X2_Easy.c: 33:     LATD |= lower_bits;
   718   00084E  5004               	movf	FM_Lcd_Send_Nibble@lower_bits^0,w,c	;volatile
   719   000850  128C               	iorwf	140,f,c	;volatile
   720                           
   721                           ;FM_LCD16X2_Easy.c: 34:     LATD |= (1 << 2);; _delay((unsigned long)((1)*(8000000/4000.
      +                          0))); LATD &= ~(1 << 2);; _delay((unsigned long)((1)*(8000000/4000.0)));;
   722   000852  848C               	bsf	140,2,c	;volatile
   723   000854  0E03               	movlw	3
   724   000856  6E01               	movwf	??_FM_Lcd_Send_Nibble^0,c
   725   000858  0E98               	movlw	152
   726   00085A                     u97:
   727   00085A  2EE8               	decfsz	wreg,f,c
   728   00085C  D7FE               	bra	u97
   729   00085E  2E01               	decfsz	??_FM_Lcd_Send_Nibble^0,f,c
   730   000860  D7FC               	bra	u97
   731   000862  948C               	bcf	140,2,c	;volatile
   732   000864  0E03               	movlw	3
   733   000866  6E01               	movwf	??_FM_Lcd_Send_Nibble^0,c
   734   000868  0E98               	movlw	152
   735   00086A                     u107:
   736   00086A  2EE8               	decfsz	wreg,f,c
   737   00086C  D7FE               	bra	u107
   738   00086E  2E01               	decfsz	??_FM_Lcd_Send_Nibble^0,f,c
   739   000870  D7FC               	bra	u107
   740   000872                     
   741                           ;FM_LCD16X2_Easy.c: 35:     LATD &= ~lower_bits;
   742   000872  5004               	movf	FM_Lcd_Send_Nibble@lower_bits^0,w,c	;volatile
   743   000874  0AFF               	xorlw	255
   744   000876  168C               	andwf	140,f,c	;volatile
   745   000878  0012               	return		;funcret
   746   00087A                     __end_of_FM_Lcd_Send_Nibble:
   747                           	callstack 0
   748                           
   749 ;; *************** function _FM_Lcd_Easy_Gpio_Init *****************
   750 ;; Defined at:
   751 ;;		line 7 in file "FM_LCD16X2_Easy.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;		None
   754 ;; Auto vars:     Size  Location     Type
   755 ;;  bits_data       1    0        unsigned char 
   756 ;; Return value:  Size  Location     Type
   757 ;;                  1    wreg      void 
   758 ;; Registers used:
   759 ;;		wreg, status,2, status,0
   760 ;; Tracked objects:
   761 ;;		On entry : 0/0
   762 ;;		On exit  : 0/0
   763 ;;		Unchanged: 0/0
   764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   765 ;;      Params:         0       0       0       0       0       0       0       0       0
   766 ;;      Locals:         0       0       0       0       0       0       0       0       0
   767 ;;      Temps:          0       0       0       0       0       0       0       0       0
   768 ;;      Totals:         0       0       0       0       0       0       0       0       0
   769 ;;Total ram usage:        0 bytes
   770 ;; Hardware stack levels used: 1
   771 ;; Hardware stack levels required when called: 1
   772 ;; This function calls:
   773 ;;		Nothing
   774 ;; This function is called by:
   775 ;;		_FM_Lcd_Easy_Init
   776 ;; This function uses a non-reentrant model
   777 ;;
   778                           
   779                           	psect	text8
   780   000998                     __ptext8:
   781                           	callstack 0
   782   000998                     _FM_Lcd_Easy_Gpio_Init:
   783                           	callstack 28
   784   000998                     
   785                           ;FM_LCD16X2_Easy.c: 15:     TRISD = 0x00;
   786   000998  0E00               	movlw	0
   787   00099A  6E95               	movwf	149,c	;volatile
   788   00099C                     
   789                           ;FM_LCD16X2_Easy.c: 16:     LATD &= ~(1 << 1);
   790   00099C  928C               	bcf	140,1,c	;volatile
   791   00099E  0012               	return		;funcret
   792   0009A0                     __end_of_FM_Lcd_Easy_Gpio_Init:
   793                           	callstack 0
   794                           
   795 ;; *************** function _ISR *****************
   796 ;; Defined at:
   797 ;;		line 23 in file "main.c"
   798 ;; Parameters:    Size  Location     Type
   799 ;;		None
   800 ;; Auto vars:     Size  Location     Type
   801 ;;		None
   802 ;; Return value:  Size  Location     Type
   803 ;;                  1    wreg      void 
   804 ;; Registers used:
   805 ;;		None
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   811 ;;      Params:         0       0       0       0       0       0       0       0       0
   812 ;;      Locals:         0       0       0       0       0       0       0       0       0
   813 ;;      Temps:          0       0       0       0       0       0       0       0       0
   814 ;;      Totals:         0       0       0       0       0       0       0       0       0
   815 ;;Total ram usage:        0 bytes
   816 ;; Hardware stack levels used: 1
   817 ;; This function calls:
   818 ;;		Nothing
   819 ;; This function is called by:
   820 ;;		Interrupt level 2
   821 ;; This function uses a non-reentrant model
   822 ;;
   823                           
   824                           	psect	intcode
   825   000008                     __pintcode:
   826                           	callstack 0
   827   000008                     _ISR:
   828                           	callstack 27
   829                           
   830                           ;incstack = 0
   831   000008  820B               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   832   00000A  EDD0  F004         	call	int_func,f	;refresh shadow registers
   833                           
   834                           	psect	intcode_body
   835   0009A0                     __pintcode_body:
   836                           	callstack 27
   837   0009A0                     int_func:
   838                           	callstack 27
   839   0009A0  0006               	pop		; remove dummy address from shadow register refresh
   840   0009A2  920B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   841   0009A4  0011               	retfie		f
   842   0009A6                     __end_of_ISR:
   843                           	callstack 0
   844                           
   845                           	psect	rparam
   846   000000                     
   847                           	psect	temp
   848   00000B                     btemp:
   849                           	callstack 0
   850   00000B                     	ds	1
   851   000000                     int$flags	set	btemp
   852   000000                     wtemp8	set	btemp+1
   853   000000                     ttemp5	set	btemp+1
   854   000000                     ttemp6	set	btemp+4
   855   000000                     ttemp7	set	btemp+8
   856                           
   857                           	psect	idloc
   858                           
   859                           ;Config register IDLOC0 @ 0x200000
   860                           ;	unspecified, using default values
   861   200000                     	org	2097152
   862   200000  FF                 	db	255
   863                           
   864                           ;Config register IDLOC1 @ 0x200001
   865                           ;	unspecified, using default values
   866   200001                     	org	2097153
   867   200001  FF                 	db	255
   868                           
   869                           ;Config register IDLOC2 @ 0x200002
   870                           ;	unspecified, using default values
   871   200002                     	org	2097154
   872   200002  FF                 	db	255
   873                           
   874                           ;Config register IDLOC3 @ 0x200003
   875                           ;	unspecified, using default values
   876   200003                     	org	2097155
   877   200003  FF                 	db	255
   878                           
   879                           ;Config register IDLOC4 @ 0x200004
   880                           ;	unspecified, using default values
   881   200004                     	org	2097156
   882   200004  FF                 	db	255
   883                           
   884                           ;Config register IDLOC5 @ 0x200005
   885                           ;	unspecified, using default values
   886   200005                     	org	2097157
   887   200005  FF                 	db	255
   888                           
   889                           ;Config register IDLOC6 @ 0x200006
   890                           ;	unspecified, using default values
   891   200006                     	org	2097158
   892   200006  FF                 	db	255
   893                           
   894                           ;Config register IDLOC7 @ 0x200007
   895                           ;	unspecified, using default values
   896   200007                     	org	2097159
   897   200007  FF                 	db	255
   898                           
   899                           	psect	config
   900                           
   901                           ;Config register CONFIG1L @ 0x300000
   902                           ;	PLL Prescaler Selection bits
   903                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   904                           ;	System Clock Postscaler Selection bits
   905                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   906                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   907                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   908   300000                     	org	3145728
   909   300000  00                 	db	0
   910                           
   911                           ;Config register CONFIG1H @ 0x300001
   912                           ;	Oscillator Selection bits
   913                           ;	FOSC = INTOSC_HS, Internal oscillator, HS oscillator used by USB (INTHS)
   914                           ;	Fail-Safe Clock Monitor Enable bit
   915                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   916                           ;	Internal/External Oscillator Switchover bit
   917                           ;	IESO = OFF, Oscillator Switchover mode disabled
   918   300001                     	org	3145729
   919   300001  0B                 	db	11
   920                           
   921                           ;Config register CONFIG2L @ 0x300002
   922                           ;	Power-up Timer Enable bit
   923                           ;	PWRT = OFF, PWRT disabled
   924                           ;	Brown-out Reset Enable bits
   925                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   926                           ;	Brown-out Reset Voltage bits
   927                           ;	BORV = 3, Minimum setting 2.05V
   928                           ;	USB Voltage Regulator Enable bit
   929                           ;	VREGEN = OFF, USB voltage regulator disabled
   930   300002                     	org	3145730
   931   300002  19                 	db	25
   932                           
   933                           ;Config register CONFIG2H @ 0x300003
   934                           ;	Watchdog Timer Enable bit
   935                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   936                           ;	Watchdog Timer Postscale Select bits
   937                           ;	WDTPS = 32768, 1:32768
   938   300003                     	org	3145731
   939   300003  1E                 	db	30
   940                           
   941                           ; Padding undefined space
   942   300004                     	org	3145732
   943   300004  FF                 	db	255
   944                           
   945                           ;Config register CONFIG3H @ 0x300005
   946                           ;	CCP2 MUX bit
   947                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
   948                           ;	PORTB A/D Enable bit
   949                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   950                           ;	Low-Power Timer 1 Oscillator Enable bit
   951                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   952                           ;	MCLR Pin Enable bit
   953                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   954   300005                     	org	3145733
   955   300005  81                 	db	129
   956                           
   957                           ;Config register CONFIG4L @ 0x300006
   958                           ;	Stack Full/Underflow Reset Enable bit
   959                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
   960                           ;	Single-Supply ICSP Enable bit
   961                           ;	LVP = OFF, Single-Supply ICSP disabled
   962                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   963                           ;	ICPRT = OFF, ICPORT disabled
   964                           ;	Extended Instruction Set Enable bit
   965                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   966                           ;	Background Debugger Enable bit
   967                           ;	DEBUG = 0x1, unprogrammed default
   968   300006                     	org	3145734
   969   300006  80                 	db	128
   970                           
   971                           ; Padding undefined space
   972   300007                     	org	3145735
   973   300007  FF                 	db	255
   974                           
   975                           ;Config register CONFIG5L @ 0x300008
   976                           ;	Code Protection bit
   977                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   978                           ;	Code Protection bit
   979                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   980                           ;	Code Protection bit
   981                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   982                           ;	Code Protection bit
   983                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   984   300008                     	org	3145736
   985   300008  0F                 	db	15
   986                           
   987                           ;Config register CONFIG5H @ 0x300009
   988                           ;	Boot Block Code Protection bit
   989                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   990                           ;	Data EEPROM Code Protection bit
   991                           ;	CPD = OFF, Data EEPROM is not code-protected
   992   300009                     	org	3145737
   993   300009  C0                 	db	192
   994                           
   995                           ;Config register CONFIG6L @ 0x30000A
   996                           ;	Write Protection bit
   997                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   998                           ;	Write Protection bit
   999                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1000                           ;	Write Protection bit
  1001                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1002                           ;	Write Protection bit
  1003                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1004   30000A                     	org	3145738
  1005   30000A  0F                 	db	15
  1006                           
  1007                           ;Config register CONFIG6H @ 0x30000B
  1008                           ;	Configuration Register Write Protection bit
  1009                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1010                           ;	Boot Block Write Protection bit
  1011                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1012                           ;	Data EEPROM Write Protection bit
  1013                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1014   30000B                     	org	3145739
  1015   30000B  E0                 	db	224
  1016                           
  1017                           ;Config register CONFIG7L @ 0x30000C
  1018                           ;	Table Read Protection bit
  1019                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1020                           ;	Table Read Protection bit
  1021                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1022                           ;	Table Read Protection bit
  1023                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1024                           ;	Table Read Protection bit
  1025                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1026   30000C                     	org	3145740
  1027   30000C  0F                 	db	15
  1028                           
  1029                           ;Config register CONFIG7H @ 0x30000D
  1030                           ;	Boot Block Table Read Protection bit
  1031                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1032   30000D                     	org	3145741
  1033   30000D  40                 	db	64
  1034                           tosu	equ	0xFFF
  1035                           tosh	equ	0xFFE
  1036                           tosl	equ	0xFFD
  1037                           stkptr	equ	0xFFC
  1038                           pclatu	equ	0xFFB
  1039                           pclath	equ	0xFFA
  1040                           pcl	equ	0xFF9
  1041                           tblptru	equ	0xFF8
  1042                           tblptrh	equ	0xFF7
  1043                           tblptrl	equ	0xFF6
  1044                           tablat	equ	0xFF5
  1045                           prodh	equ	0xFF4
  1046                           prodl	equ	0xFF3
  1047                           indf0	equ	0xFEF
  1048                           postinc0	equ	0xFEE
  1049                           postdec0	equ	0xFED
  1050                           preinc0	equ	0xFEC
  1051                           plusw0	equ	0xFEB
  1052                           fsr0h	equ	0xFEA
  1053                           fsr0l	equ	0xFE9
  1054                           wreg	equ	0xFE8
  1055                           indf1	equ	0xFE7
  1056                           postinc1	equ	0xFE6
  1057                           postdec1	equ	0xFE5
  1058                           preinc1	equ	0xFE4
  1059                           plusw1	equ	0xFE3
  1060                           fsr1h	equ	0xFE2
  1061                           fsr1l	equ	0xFE1
  1062                           bsr	equ	0xFE0
  1063                           indf2	equ	0xFDF
  1064                           postinc2	equ	0xFDE
  1065                           postdec2	equ	0xFDD
  1066                           preinc2	equ	0xFDC
  1067                           plusw2	equ	0xFDB
  1068                           fsr2h	equ	0xFDA
  1069                           fsr2l	equ	0xFD9
  1070                           status	equ	0xFD8

Data Sizes:
    Strings     12
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     10      10
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    FM_Lcd_Send_String@cadena	PTR unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_FM_Lcd_Send_String
    _FM_Lcd_Set_Cursor->_FM_Lcd_Send_Command
    _FM_Lcd_Send_String->_FM_Lcd_Send_Character
    _FM_Lcd_Send_Character->_FM_Lcd_Send_Nibble
    _FM_Lcd_Easy_Init->_FM_Lcd_Send_Command
    _FM_Lcd_Send_Command->_FM_Lcd_Send_Nibble

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     650
                   _FM_Lcd_Easy_Init
                 _FM_Lcd_Send_String
                  _FM_Lcd_Set_Cursor
           _Init_Internal_Oscillator
 ---------------------------------------------------------------------------------
 (1) _Init_Internal_Oscillator                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FM_Lcd_Set_Cursor                                    3     2      1     274
                                              5 COMRAM     3     2      1
                _FM_Lcd_Send_Command
 ---------------------------------------------------------------------------------
 (1) _FM_Lcd_Send_String                                   5     3      2     271
                                              5 COMRAM     5     3      2
              _FM_Lcd_Send_Character
 ---------------------------------------------------------------------------------
 (2) _FM_Lcd_Send_Character                                1     1      0     105
                                              4 COMRAM     1     1      0
                 _FM_Lcd_Send_Nibble
 ---------------------------------------------------------------------------------
 (1) _FM_Lcd_Easy_Init                                     0     0      0     105
              _FM_Lcd_Easy_Gpio_Init
                _FM_Lcd_Send_Command
 ---------------------------------------------------------------------------------
 (2) _FM_Lcd_Send_Command                                  1     1      0     105
                                              4 COMRAM     1     1      0
                 _FM_Lcd_Send_Nibble
 ---------------------------------------------------------------------------------
 (3) _FM_Lcd_Send_Nibble                                   4     4      0      90
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _FM_Lcd_Easy_Gpio_Init                                1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FM_Lcd_Easy_Init
     _FM_Lcd_Easy_Gpio_Init
     _FM_Lcd_Send_Command
       _FM_Lcd_Send_Nibble
   _FM_Lcd_Send_String
     _FM_Lcd_Send_Character
       _FM_Lcd_Send_Nibble
   _FM_Lcd_Set_Cursor
     _FM_Lcd_Send_Command
   _Init_Internal_Oscillator

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5E      A       A       1       10.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBIGSFRh          2C      0       0      20        0.0%
BITBIGSFRlh         3D      0       0      21        0.0%
BITBIGSFRllh         8      0       0      22        0.0%
BITBIGSFRlll        2C      0       0      23        0.0%
ABS                  0      0       0      24        0.0%
BIGRAM             7FF      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Mon Jun 26 19:05:23 2023

                                    l30 097E                                      l41 099E  
                                    l50 098A                                      l44 0878  
                                    l61 0900                                      l47 0996  
                                    l63 090C                                      l56 08C8  
                                    l66 0936                                      u40 08E0  
                                    u41 08DC                                      u50 08F8  
                                    u51 08F4                                      u60 08C8  
                                    u61 08C4                                      u77 0830  
                                    u87 0840                                      u97 085A  
                                   l810 08CC                                     l820 0902  
                                   l812 08D0                                     l750 0848  
                                   l742 0810                                     l830 089E  
                                   l822 0906                                     l814 08E0  
                                   l760 0998                                     l752 084E  
                                   l744 0828                                     l832 08A0  
                                   l824 090C                                     l816 08E8  
                                   l840 094A                                     l762 099C  
                                   l754 0854                                     l746 0838  
                                   l770 0984                                     l826 087A  
                                   l818 08F8                                     l842 0956  
                                   l834 0938                                     l756 0862  
                                   l748 083A                                     l764 098E  
                                   l828 0882                                     l772 0972  
                                   l836 093C                                     l758 0872  
                                   l766 0990                                     l774 090E  
                                   l838 0940                                     l768 0982  
                                   u107 086A                                     _ISR 0008  
                                   wreg 0FE8                                    ?_ISR 0001  
                                  STR_1 0801                                    _LATD 0F8C  
                                  i2l19 09A2              __end_of_FM_Lcd_Send_Nibble 087A  
                                  _main 0938            FM_Lcd_Send_Nibble@upper_bits 0003  
            __end_of_FM_Lcd_Send_String 08CA                                    btemp 000B  
               ??_FM_Lcd_Send_Character 0005                                    start 000E  
FM_Lcd_Send_Character@character_to_send 0005                   _FM_Lcd_Easy_Gpio_Init 0998  
                          ___param_bank 0000                                   ??_ISR 0001  
                                 ?_main 0001             __end_of_FM_Lcd_Send_Command 0998  
                                 _TRISD 0F95                                   tablat 0FF5  
                                 ttemp5 000C                                   ttemp6 000F  
                                 ttemp7 0013                                   status 0FD8  
                                 wtemp8 000C                         __initialization 0960  
                          __end_of_main 0960                                  ??_main 000B  
                         __activetblptr 0001                                  _OSCCON 0FD3  
                ?_FM_Lcd_Easy_Gpio_Init 0001                                  isa$std 0001  
                          __mediumconst 0000                                  tblptrh 0FF7  
                                tblptrl 0FF6                                  tblptru 0FF8  
                            __accesstop 0060                 __end_of__initialization 0960  
                         ___rparam_used 0001                          __pcstackCOMRAM 0001  
                      _FM_Lcd_Easy_Init 090E           __end_of_FM_Lcd_Send_Character 098C  
                    _FM_Lcd_Send_Nibble 080E                      _FM_Lcd_Send_String 087A  
             ?_Init_Internal_Oscillator 0001                     ?_FM_Lcd_Send_Nibble 0001  
                   ?_FM_Lcd_Send_String 0006                    ??_FM_Lcd_Send_Nibble 0001  
                  ??_FM_Lcd_Send_String 0008                                 __Hparam 0000  
                               __Lparam 0000                            __psmallconst 0800  
                               __pcinit 0960                                 __ramtop 0800  
                               __ptext0 0938                                 __ptext1 0972  
                               __ptext2 08CA                                 __ptext3 087A  
                               __ptext4 0980                                 __ptext5 090E  
                               __ptext6 098C                                 __ptext7 080E  
                               __ptext8 0998                          __pintcode_body 09A0  
                  end_of_initialization 0960                 ??_FM_Lcd_Easy_Gpio_Init 0001  
                               int_func 09A0                  FM_Lcd_Set_Cursor@filas 0007  
              __end_of_FM_Lcd_Easy_Init 0938               FM_Lcd_Set_Cursor@base_pos 0008  
                   start_initialization 0960                             __end_of_ISR 09A6  
              FM_Lcd_Send_String@cadena 0006        __end_of_Init_Internal_Oscillator 0980  
                             __pintcode 0008                   _FM_Lcd_Send_Character 0980  
                   _FM_Lcd_Send_Command 098C                       _FM_Lcd_Set_Cursor 08CA  
                    ?_FM_Lcd_Set_Cursor 0006      FM_Lcd_Send_Command@command_to_send 0005  
                           __smallconst 0800                     ??_FM_Lcd_Set_Cursor 0007  
                  ?_FM_Lcd_Send_Command 0001           __end_of_FM_Lcd_Easy_Gpio_Init 09A0  
             __end_of_FM_Lcd_Set_Cursor 090E                _Init_Internal_Oscillator 0972  
                 ??_FM_Lcd_Send_Command 0005                       ?_FM_Lcd_Easy_Init 0001  
                    ??_FM_Lcd_Easy_Init 0006                 FM_Lcd_Send_String@index 000A  
                              __Hrparam 0000                  ?_FM_Lcd_Send_Character 0001  
                              __Lrparam 0000                            __Lsmallconst 0800  
                              isa$xinst 0000                                int$flags 000B  
                              intlevel2 0000          FM_Lcd_Send_Nibble@byte_to_send 0002  
                            _OSCCONbits 0FD3                FM_Lcd_Set_Cursor@columna 0006  
            ??_Init_Internal_Oscillator 0001            FM_Lcd_Send_Nibble@lower_bits 0004  
