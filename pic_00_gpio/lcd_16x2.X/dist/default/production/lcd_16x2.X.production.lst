

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Apr 24 12:37:37 2023

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21  0000                     
    22                           ; Version 2.40
    23                           ; Generated 17/11/2021 GMT
    24                           ; 
    25                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F4550 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     _TRISD	set	3989
    58  0000                     _LATD	set	3980
    59                           
    60                           	psect	smallconst
    61  000800                     __psmallconst:
    62                           	callstack 0
    63  000800  00                 	db	0
    64  000801                     STR_1:
    65  000801  48                 	db	72	;'H'
    66  000802  4F                 	db	79	;'O'
    67  000803  4C                 	db	76	;'L'
    68  000804  41                 	db	65	;'A'
    69  000805  00                 	db	0
    70  000806  00                 	db	0	; dummy byte at the end
    71  0000                     
    72                           ; #config settings
    73                           
    74                           	psect	cinit
    75  00097A                     __pcinit:
    76                           	callstack 0
    77  00097A                     start_initialization:
    78                           	callstack 0
    79  00097A                     __initialization:
    80                           	callstack 0
    81  00097A                     end_of_initialization:
    82                           	callstack 0
    83  00097A                     __end_of__initialization:
    84                           	callstack 0
    85  00097A  0E00               	movlw	low (__Lsmallconst shr (0+16))
    86  00097C  6EF8               	movwf	tblptru,c
    87  00097E  0E08               	movlw	high __Lsmallconst
    88  000980  6EF7               	movwf	tblptrh,c
    89  000982  0100               	movlb	0
    90  000984  EF88  F004         	goto	_main	;jump to C main() function
    91                           
    92                           	psect	cstackCOMRAM
    93  000001                     __pcstackCOMRAM:
    94                           	callstack 0
    95  000001                     ??_FM_Lcd_Send_Nibble:
    96  000001                     
    97                           ; 2 bytes @ 0x0
    98  000001                     	ds	1
    99  000002                     FM_Lcd_Send_Nibble@byte_to_send:
   100                           	callstack 0
   101                           
   102                           ; 1 bytes @ 0x1
   103  000002                     	ds	1
   104  000003                     FM_Lcd_Send_Nibble@upper_bits:
   105                           	callstack 0
   106                           
   107                           ; 1 bytes @ 0x2
   108  000003                     	ds	1
   109  000004                     FM_Lcd_Send_Nibble@lower_bits:
   110                           	callstack 0
   111                           
   112                           ; 1 bytes @ 0x3
   113  000004                     	ds	1
   114  000005                     FM_Lcd_Send_Command@command_to_send:
   115                           	callstack 0
   116  000005                     FM_Lcd_Send_Character@character_to_send:
   117                           	callstack 0
   118                           
   119                           ; 1 bytes @ 0x4
   120  000005                     	ds	1
   121  000006                     FM_Lcd_Set_Cursor@columna:
   122                           	callstack 0
   123  000006                     FM_Lcd_Send_String@cadena:
   124                           	callstack 0
   125                           
   126                           ; 2 bytes @ 0x5
   127  000006                     	ds	1
   128  000007                     FM_Lcd_Set_Cursor@filas:
   129                           	callstack 0
   130                           
   131                           ; 1 bytes @ 0x6
   132  000007                     	ds	1
   133  000008                     ??_FM_Lcd_Send_String:
   134  000008                     FM_Lcd_Set_Cursor@base_pos:
   135                           	callstack 0
   136                           
   137                           ; 1 bytes @ 0x7
   138  000008                     	ds	2
   139  00000A                     FM_Lcd_Send_String@index:
   140                           	callstack 0
   141                           
   142                           ; 1 bytes @ 0x9
   143  00000A                     	ds	1
   144  00000B                     ??_main:
   145                           
   146                           ; 1 bytes @ 0xA
   147  00000B                     	ds	2
   148                           
   149 ;;
   150 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   151 ;;
   152 ;; *************** function _main *****************
   153 ;; Defined at:
   154 ;;		line 32 in file "main.c"
   155 ;; Parameters:    Size  Location     Type
   156 ;;		None
   157 ;; Auto vars:     Size  Location     Type
   158 ;;		None
   159 ;; Return value:  Size  Location     Type
   160 ;;                  2   18[None  ] int 
   161 ;; Registers used:
   162 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   163 ;; Tracked objects:
   164 ;;		On entry : 0/0
   165 ;;		On exit  : 0/0
   166 ;;		Unchanged: 0/0
   167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   168 ;;      Params:         0       0       0       0       0       0       0       0       0
   169 ;;      Locals:         0       0       0       0       0       0       0       0       0
   170 ;;      Temps:          2       0       0       0       0       0       0       0       0
   171 ;;      Totals:         2       0       0       0       0       0       0       0       0
   172 ;;Total ram usage:        2 bytes
   173 ;; Hardware stack levels required when called: 3
   174 ;; This function calls:
   175 ;;		_FM_Lcd_Easy_Init
   176 ;;		_FM_Lcd_Send_String
   177 ;;		_FM_Lcd_Set_Cursor
   178 ;;		_Init_Led_System
   179 ;; This function is called by:
   180 ;;		Startup code after reset
   181 ;; This function uses a non-reentrant model
   182 ;;
   183                           
   184                           	psect	text0
   185  000910                     __ptext0:
   186                           	callstack 0
   187  000910                     _main:
   188                           	callstack 28
   189  000910                     
   190                           ;main.c: 34:     Init_Led_System();
   191  000910  ECD4  F004         	call	_Init_Led_System	;wreg free
   192  000914                     
   193                           ;main.c: 35:     FM_Lcd_Easy_Init();
   194  000914  ECA8  F004         	call	_FM_Lcd_Easy_Init	;wreg free
   195  000918                     
   196                           ;main.c: 36:     FM_Lcd_Set_Cursor(ROW_2, COL_5);
   197  000918  0E04               	movlw	4
   198  00091A  6E06               	movwf	FM_Lcd_Set_Cursor@columna^0,c
   199  00091C  0E01               	movlw	1
   200  00091E  EC66  F004         	call	_FM_Lcd_Set_Cursor
   201  000922                     
   202                           ;main.c: 37:     FM_Lcd_Send_String("HOLA");
   203  000922  0E01               	movlw	low STR_1
   204  000924  6E06               	movwf	FM_Lcd_Send_String@cadena^0,c
   205  000926  0E08               	movlw	high STR_1
   206  000928  6E07               	movwf	(FM_Lcd_Send_String@cadena+1)^0,c
   207  00092A  EC3E  F004         	call	_FM_Lcd_Send_String	;wreg free
   208  00092E                     l839:
   209                           
   210                           ;main.c: 39:     {;main.c: 40:         LATD ^= (1 << 0);
   211  00092E  0E01               	movlw	1
   212  000930  1A8C               	xorwf	140,f,c	;volatile
   213  000932                     
   214                           ;main.c: 41:         _delay((unsigned long)((100)*(20000000UL/4000.0)));
   215  000932  0E03               	movlw	3
   216  000934  6E0C               	movwf	(??_main+1)^0,c
   217  000936  0E8A               	movlw	138
   218  000938  6E0B               	movwf	??_main^0,c
   219  00093A  0E56               	movlw	86
   220  00093C                     u77:
   221  00093C  2EE8               	decfsz	wreg,f,c
   222  00093E  D7FE               	bra	u77
   223  000940  2E0B               	decfsz	??_main^0,f,c
   224  000942  D7FC               	bra	u77
   225  000944  2E0C               	decfsz	(??_main+1)^0,f,c
   226  000946  D7FA               	bra	u77
   227  000948  EF97  F004         	goto	l839
   228  00094C  EF00  F000         	goto	start
   229  000950                     __end_of_main:
   230                           	callstack 0
   231                           
   232 ;; *************** function _Init_Led_System *****************
   233 ;; Defined at:
   234 ;;		line 50 in file "main.c"
   235 ;; Parameters:    Size  Location     Type
   236 ;;		None
   237 ;; Auto vars:     Size  Location     Type
   238 ;;		None
   239 ;; Return value:  Size  Location     Type
   240 ;;                  1    wreg      void 
   241 ;; Registers used:
   242 ;;		status,2, status,0
   243 ;; Tracked objects:
   244 ;;		On entry : 0/0
   245 ;;		On exit  : 0/0
   246 ;;		Unchanged: 0/0
   247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   248 ;;      Params:         0       0       0       0       0       0       0       0       0
   249 ;;      Locals:         0       0       0       0       0       0       0       0       0
   250 ;;      Temps:          0       0       0       0       0       0       0       0       0
   251 ;;      Totals:         0       0       0       0       0       0       0       0       0
   252 ;;Total ram usage:        0 bytes
   253 ;; Hardware stack levels used: 1
   254 ;; This function calls:
   255 ;;		Nothing
   256 ;; This function is called by:
   257 ;;		_main
   258 ;; This function uses a non-reentrant model
   259 ;;
   260                           
   261                           	psect	text1
   262  0009A8                     __ptext1:
   263                           	callstack 0
   264  0009A8                     _Init_Led_System:
   265                           	callstack 30
   266  0009A8                     
   267                           ;main.c: 53:     TRISD &= ~(1 << 0);
   268  0009A8  9095               	bcf	149,0,c	;volatile
   269                           
   270                           ;main.c: 54:     LATD &= ~(1 << 0);
   271  0009AA  908C               	bcf	140,0,c	;volatile
   272  0009AC  0012               	return		;funcret
   273  0009AE                     __end_of_Init_Led_System:
   274                           	callstack 0
   275                           
   276 ;; *************** function _FM_Lcd_Set_Cursor *****************
   277 ;; Defined at:
   278 ;;		line 62 in file "FM_LCD16X2_Easy.c"
   279 ;; Parameters:    Size  Location     Type
   280 ;;  filas           1    wreg     enum E3192
   281 ;;  columna         1    5[COMRAM] enum E3196
   282 ;; Auto vars:     Size  Location     Type
   283 ;;  filas           1    6[COMRAM] enum E3192
   284 ;;  base_pos        1    7[COMRAM] unsigned char 
   285 ;; Return value:  Size  Location     Type
   286 ;;                  1    wreg      void 
   287 ;; Registers used:
   288 ;;		wreg, status,2, status,0, cstack
   289 ;; Tracked objects:
   290 ;;		On entry : 0/0
   291 ;;		On exit  : 0/0
   292 ;;		Unchanged: 0/0
   293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   294 ;;      Params:         1       0       0       0       0       0       0       0       0
   295 ;;      Locals:         2       0       0       0       0       0       0       0       0
   296 ;;      Temps:          0       0       0       0       0       0       0       0       0
   297 ;;      Totals:         3       0       0       0       0       0       0       0       0
   298 ;;Total ram usage:        3 bytes
   299 ;; Hardware stack levels used: 1
   300 ;; Hardware stack levels required when called: 2
   301 ;; This function calls:
   302 ;;		_FM_Lcd_Send_Command
   303 ;; This function is called by:
   304 ;;		_main
   305 ;; This function uses a non-reentrant model
   306 ;;
   307                           
   308                           	psect	text2
   309  0008CC                     __ptext2:
   310                           	callstack 0
   311  0008CC                     _FM_Lcd_Set_Cursor:
   312                           	callstack 28
   313                           
   314                           ;incstack = 0
   315                           ;FM_Lcd_Set_Cursor@filas stored from wreg
   316  0008CC  6E07               	movwf	FM_Lcd_Set_Cursor@filas^0,c
   317  0008CE                     
   318                           ;FM_LCD16X2_Easy.c: 62: void FM_Lcd_Set_Cursor (_row_lcd_t filas, _column_lcd_t columna)
      +                          ;FM_LCD16X2_Easy.c: 63: {;FM_LCD16X2_Easy.c: 64:     char base_pos = 0x00;
   319  0008CE  0E00               	movlw	0
   320  0008D0  6E08               	movwf	FM_Lcd_Set_Cursor@base_pos^0,c
   321  0008D2                     
   322                           ;FM_LCD16X2_Easy.c: 65:     if(filas == ROW_1)
   323  0008D2  5007               	movf	FM_Lcd_Set_Cursor@filas^0,w,c
   324  0008D4  A4D8               	btfss	status,2,c
   325  0008D6  EF6F  F004         	goto	u41
   326  0008DA  EF71  F004         	goto	u40
   327  0008DE                     u41:
   328  0008DE  EF75  F004         	goto	l813
   329  0008E2                     u40:
   330  0008E2                     
   331                           ;FM_LCD16X2_Easy.c: 66:     {;FM_LCD16X2_Easy.c: 67:         base_pos = 0x80;
   332  0008E2  0E80               	movlw	128
   333  0008E4  6E08               	movwf	FM_Lcd_Set_Cursor@base_pos^0,c
   334                           
   335                           ;FM_LCD16X2_Easy.c: 68:     }
   336  0008E6  EF82  F004         	goto	l817
   337  0008EA                     l813:
   338  0008EA  0407               	decf	FM_Lcd_Set_Cursor@filas^0,w,c
   339  0008EC  A4D8               	btfss	status,2,c
   340  0008EE  EF7B  F004         	goto	u51
   341  0008F2  EF7D  F004         	goto	u50
   342  0008F6                     u51:
   343  0008F6  EF81  F004         	goto	l56
   344  0008FA                     u50:
   345  0008FA                     
   346                           ;FM_LCD16X2_Easy.c: 70:     {;FM_LCD16X2_Easy.c: 71:         base_pos = 0xC0;
   347  0008FA  0EC0               	movlw	192
   348  0008FC  6E08               	movwf	FM_Lcd_Set_Cursor@base_pos^0,c
   349                           
   350                           ;FM_LCD16X2_Easy.c: 72:     }
   351  0008FE  EF82  F004         	goto	l817
   352  000902                     l56:
   353                           
   354                           ;FM_LCD16X2_Easy.c: 74:     {;FM_LCD16X2_Easy.c: 75:         __nop();
   355  000902  F000               	nop	
   356  000904                     l817:
   357                           
   358                           ;FM_LCD16X2_Easy.c: 79:     base_pos += columna;
   359  000904  5006               	movf	FM_Lcd_Set_Cursor@columna^0,w,c
   360  000906  2608               	addwf	FM_Lcd_Set_Cursor@base_pos^0,f,c
   361  000908                     
   362                           ;FM_LCD16X2_Easy.c: 80:     FM_Lcd_Send_Command(base_pos);
   363  000908  5008               	movf	FM_Lcd_Set_Cursor@base_pos^0,w,c
   364  00090A  ECCA  F004         	call	_FM_Lcd_Send_Command
   365  00090E  0012               	return		;funcret
   366  000910                     __end_of_FM_Lcd_Set_Cursor:
   367                           	callstack 0
   368                           
   369 ;; *************** function _FM_Lcd_Send_String *****************
   370 ;; Defined at:
   371 ;;		line 52 in file "FM_LCD16X2_Easy.c"
   372 ;; Parameters:    Size  Location     Type
   373 ;;  cadena          2    5[COMRAM] PTR unsigned char 
   374 ;;		 -> STR_1(5), 
   375 ;; Auto vars:     Size  Location     Type
   376 ;;  index           1    9[COMRAM] unsigned char 
   377 ;; Return value:  Size  Location     Type
   378 ;;                  1    wreg      void 
   379 ;; Registers used:
   380 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   381 ;; Tracked objects:
   382 ;;		On entry : 0/0
   383 ;;		On exit  : 0/0
   384 ;;		Unchanged: 0/0
   385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   386 ;;      Params:         2       0       0       0       0       0       0       0       0
   387 ;;      Locals:         1       0       0       0       0       0       0       0       0
   388 ;;      Temps:          2       0       0       0       0       0       0       0       0
   389 ;;      Totals:         5       0       0       0       0       0       0       0       0
   390 ;;Total ram usage:        5 bytes
   391 ;; Hardware stack levels used: 1
   392 ;; Hardware stack levels required when called: 2
   393 ;; This function calls:
   394 ;;		_FM_Lcd_Send_Character
   395 ;; This function is called by:
   396 ;;		_main
   397 ;; This function uses a non-reentrant model
   398 ;;
   399                           
   400                           	psect	text3
   401  00087C                     __ptext3:
   402                           	callstack 0
   403  00087C                     _FM_Lcd_Send_String:
   404                           	callstack 28
   405  00087C                     
   406                           ;FM_LCD16X2_Easy.c: 52: void FM_Lcd_Send_String (char *cadena);FM_LCD16X2_Easy.c: 53: {;
      +                          FM_LCD16X2_Easy.c: 54:     uint8_t index = 0;
   407  00087C  0E00               	movlw	0
   408  00087E  6E0A               	movwf	FM_Lcd_Send_String@index^0,c
   409                           
   410                           ;FM_LCD16X2_Easy.c: 55:     while(cadena[index] != '\0')
   411  000880  EF51  F004         	goto	l829
   412  000884                     l825:
   413                           
   414                           ;FM_LCD16X2_Easy.c: 56:     {;FM_LCD16X2_Easy.c: 57:         FM_Lcd_Send_Character(caden
      +                          a[index]);
   415  000884  500A               	movf	FM_Lcd_Send_String@index^0,w,c
   416  000886  2406               	addwf	FM_Lcd_Send_String@cadena^0,w,c
   417  000888  6E08               	movwf	??_FM_Lcd_Send_String^0,c
   418  00088A  0E00               	movlw	0
   419  00088C  2007               	addwfc	(FM_Lcd_Send_String@cadena+1)^0,w,c
   420  00088E  6E09               	movwf	(??_FM_Lcd_Send_String+1)^0,c
   421  000890  C008  FFF6         	movff	??_FM_Lcd_Send_String,tblptrl
   422  000894  C009  FFF7         	movff	??_FM_Lcd_Send_String+1,tblptrh
   423  000898                     	if	0	;tblptru may be non-zero
   424  000898                     	endif
   425  000898                     	if	0	;tblptru may be non-zero
   426  000898                     	endif
   427  000898  0008               	tblrd		*
   428  00089A  50F5               	movf	tablat,w,c
   429  00089C  ECC4  F004         	call	_FM_Lcd_Send_Character
   430  0008A0                     
   431                           ;FM_LCD16X2_Easy.c: 58:         index++;
   432  0008A0  2A0A               	incf	FM_Lcd_Send_String@index^0,f,c
   433  0008A2                     l829:
   434                           
   435                           ;FM_LCD16X2_Easy.c: 55:     while(cadena[index] != '\0')
   436  0008A2  500A               	movf	FM_Lcd_Send_String@index^0,w,c
   437  0008A4  2406               	addwf	FM_Lcd_Send_String@cadena^0,w,c
   438  0008A6  6E08               	movwf	??_FM_Lcd_Send_String^0,c
   439  0008A8  0E00               	movlw	0
   440  0008AA  2007               	addwfc	(FM_Lcd_Send_String@cadena+1)^0,w,c
   441  0008AC  6E09               	movwf	(??_FM_Lcd_Send_String+1)^0,c
   442  0008AE  C008  FFF6         	movff	??_FM_Lcd_Send_String,tblptrl
   443  0008B2  C009  FFF7         	movff	??_FM_Lcd_Send_String+1,tblptrh
   444  0008B6                     	if	0	;tblptru may be non-zero
   445  0008B6                     	endif
   446  0008B6                     	if	0	;tblptru may be non-zero
   447  0008B6                     	endif
   448  0008B6  0008               	tblrd		*
   449  0008B8  50F5               	movf	tablat,w,c
   450  0008BA  0900               	iorlw	0
   451  0008BC  A4D8               	btfss	status,2,c
   452  0008BE  EF63  F004         	goto	u61
   453  0008C2  EF65  F004         	goto	u60
   454  0008C6                     u61:
   455  0008C6  EF42  F004         	goto	l825
   456  0008CA                     u60:
   457  0008CA  0012               	return		;funcret
   458  0008CC                     __end_of_FM_Lcd_Send_String:
   459                           	callstack 0
   460                           
   461 ;; *************** function _FM_Lcd_Send_Character *****************
   462 ;; Defined at:
   463 ;;		line 45 in file "FM_LCD16X2_Easy.c"
   464 ;; Parameters:    Size  Location     Type
   465 ;;  character_to    1    wreg     unsigned char 
   466 ;; Auto vars:     Size  Location     Type
   467 ;;  character_to    1    4[COMRAM] unsigned char 
   468 ;; Return value:  Size  Location     Type
   469 ;;                  1    wreg      void 
   470 ;; Registers used:
   471 ;;		wreg, status,2, status,0, cstack
   472 ;; Tracked objects:
   473 ;;		On entry : 0/0
   474 ;;		On exit  : 0/0
   475 ;;		Unchanged: 0/0
   476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   477 ;;      Params:         0       0       0       0       0       0       0       0       0
   478 ;;      Locals:         1       0       0       0       0       0       0       0       0
   479 ;;      Temps:          0       0       0       0       0       0       0       0       0
   480 ;;      Totals:         1       0       0       0       0       0       0       0       0
   481 ;;Total ram usage:        1 bytes
   482 ;; Hardware stack levels used: 1
   483 ;; Hardware stack levels required when called: 1
   484 ;; This function calls:
   485 ;;		_FM_Lcd_Send_Nibble
   486 ;; This function is called by:
   487 ;;		_FM_Lcd_Send_String
   488 ;; This function uses a non-reentrant model
   489 ;;
   490                           
   491                           	psect	text4
   492  000988                     __ptext4:
   493                           	callstack 0
   494  000988                     _FM_Lcd_Send_Character:
   495                           	callstack 28
   496                           
   497                           ;incstack = 0
   498                           ;FM_Lcd_Send_Character@character_to_send stored from wreg
   499  000988  6E05               	movwf	FM_Lcd_Send_Character@character_to_send^0,c
   500  00098A                     
   501                           ;FM_LCD16X2_Easy.c: 45: void FM_Lcd_Send_Character (char character_to_send);FM_LCD16X2_E
      +                          asy.c: 46: {;FM_LCD16X2_Easy.c: 47:     LATD |= (1 << 1);;
   502  00098A  828C               	bsf	140,1,c	;volatile
   503  00098C                     
   504                           ;FM_LCD16X2_Easy.c: 48:     FM_Lcd_Send_Nibble(character_to_send);
   505  00098C  5005               	movf	FM_Lcd_Send_Character@character_to_send^0,w,c
   506  00098E  EC04  F004         	call	_FM_Lcd_Send_Nibble
   507  000992  0012               	return		;funcret
   508  000994                     __end_of_FM_Lcd_Send_Character:
   509                           	callstack 0
   510                           
   511 ;; *************** function _FM_Lcd_Easy_Init *****************
   512 ;; Defined at:
   513 ;;		line 84 in file "FM_LCD16X2_Easy.c"
   514 ;; Parameters:    Size  Location     Type
   515 ;;		None
   516 ;; Auto vars:     Size  Location     Type
   517 ;;		None
   518 ;; Return value:  Size  Location     Type
   519 ;;                  1    wreg      void 
   520 ;; Registers used:
   521 ;;		wreg, status,2, status,0, cstack
   522 ;; Tracked objects:
   523 ;;		On entry : 0/0
   524 ;;		On exit  : 0/0
   525 ;;		Unchanged: 0/0
   526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   527 ;;      Params:         0       0       0       0       0       0       0       0       0
   528 ;;      Locals:         0       0       0       0       0       0       0       0       0
   529 ;;      Temps:          0       0       0       0       0       0       0       0       0
   530 ;;      Totals:         0       0       0       0       0       0       0       0       0
   531 ;;Total ram usage:        0 bytes
   532 ;; Hardware stack levels used: 1
   533 ;; Hardware stack levels required when called: 2
   534 ;; This function calls:
   535 ;;		_FM_Lcd_Easy_Gpio_Init
   536 ;;		_FM_Lcd_Send_Command
   537 ;; This function is called by:
   538 ;;		_main
   539 ;; This function uses a non-reentrant model
   540 ;;
   541                           
   542                           	psect	text5
   543  000950                     __ptext5:
   544                           	callstack 0
   545  000950                     _FM_Lcd_Easy_Init:
   546                           	callstack 28
   547  000950                     
   548                           ;FM_LCD16X2_Easy.c: 86:     FM_Lcd_Easy_Gpio_Init();
   549  000950  ECD0  F004         	call	_FM_Lcd_Easy_Gpio_Init	;wreg free
   550                           
   551                           ;FM_LCD16X2_Easy.c: 88:     FM_Lcd_Send_Command(0x01);
   552  000954  0E01               	movlw	1
   553  000956  ECCA  F004         	call	_FM_Lcd_Send_Command
   554                           
   555                           ;FM_LCD16X2_Easy.c: 89:     FM_Lcd_Send_Command(0x02);
   556  00095A  0E02               	movlw	2
   557  00095C  ECCA  F004         	call	_FM_Lcd_Send_Command
   558                           
   559                           ;FM_LCD16X2_Easy.c: 90:     FM_Lcd_Send_Command(0x06);
   560  000960  0E06               	movlw	6
   561  000962  ECCA  F004         	call	_FM_Lcd_Send_Command
   562                           
   563                           ;FM_LCD16X2_Easy.c: 91:     FM_Lcd_Send_Command(0x0C);
   564  000966  0E0C               	movlw	12
   565  000968  ECCA  F004         	call	_FM_Lcd_Send_Command
   566                           
   567                           ;FM_LCD16X2_Easy.c: 92:     FM_Lcd_Send_Command(0x10);
   568  00096C  0E10               	movlw	16
   569  00096E  ECCA  F004         	call	_FM_Lcd_Send_Command
   570                           
   571                           ;FM_LCD16X2_Easy.c: 93:     FM_Lcd_Send_Command(0x2C);
   572  000972  0E2C               	movlw	44
   573  000974  ECCA  F004         	call	_FM_Lcd_Send_Command
   574  000978  0012               	return		;funcret
   575  00097A                     __end_of_FM_Lcd_Easy_Init:
   576                           	callstack 0
   577                           
   578 ;; *************** function _FM_Lcd_Send_Command *****************
   579 ;; Defined at:
   580 ;;		line 39 in file "FM_LCD16X2_Easy.c"
   581 ;; Parameters:    Size  Location     Type
   582 ;;  command_to_s    1    wreg     unsigned char 
   583 ;; Auto vars:     Size  Location     Type
   584 ;;  command_to_s    1    4[COMRAM] unsigned char 
   585 ;; Return value:  Size  Location     Type
   586 ;;                  1    wreg      void 
   587 ;; Registers used:
   588 ;;		wreg, status,2, status,0, cstack
   589 ;; Tracked objects:
   590 ;;		On entry : 0/0
   591 ;;		On exit  : 0/0
   592 ;;		Unchanged: 0/0
   593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   594 ;;      Params:         0       0       0       0       0       0       0       0       0
   595 ;;      Locals:         1       0       0       0       0       0       0       0       0
   596 ;;      Temps:          0       0       0       0       0       0       0       0       0
   597 ;;      Totals:         1       0       0       0       0       0       0       0       0
   598 ;;Total ram usage:        1 bytes
   599 ;; Hardware stack levels used: 1
   600 ;; Hardware stack levels required when called: 1
   601 ;; This function calls:
   602 ;;		_FM_Lcd_Send_Nibble
   603 ;; This function is called by:
   604 ;;		_FM_Lcd_Set_Cursor
   605 ;;		_FM_Lcd_Easy_Init
   606 ;; This function uses a non-reentrant model
   607 ;;
   608                           
   609                           	psect	text6
   610  000994                     __ptext6:
   611                           	callstack 0
   612  000994                     _FM_Lcd_Send_Command:
   613                           	callstack 28
   614                           
   615                           ;incstack = 0
   616                           ;FM_Lcd_Send_Command@command_to_send stored from wreg
   617  000994  6E05               	movwf	FM_Lcd_Send_Command@command_to_send^0,c
   618  000996                     
   619                           ;FM_LCD16X2_Easy.c: 39: void FM_Lcd_Send_Command (char command_to_send);FM_LCD16X2_Easy.
      +                          c: 40: {;FM_LCD16X2_Easy.c: 41:     LATD &= ~(1 << 1);;
   620  000996  928C               	bcf	140,1,c	;volatile
   621  000998                     
   622                           ;FM_LCD16X2_Easy.c: 42:     FM_Lcd_Send_Nibble(command_to_send);
   623  000998  5005               	movf	FM_Lcd_Send_Command@command_to_send^0,w,c
   624  00099A  EC04  F004         	call	_FM_Lcd_Send_Nibble
   625  00099E  0012               	return		;funcret
   626  0009A0                     __end_of_FM_Lcd_Send_Command:
   627                           	callstack 0
   628                           
   629 ;; *************** function _FM_Lcd_Send_Nibble *****************
   630 ;; Defined at:
   631 ;;		line 19 in file "FM_LCD16X2_Easy.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;  byte_to_send    1    wreg     unsigned char 
   634 ;; Auto vars:     Size  Location     Type
   635 ;;  byte_to_send    1    1[COMRAM] unsigned char 
   636 ;;  lower_bits      1    3[COMRAM] unsigned char 
   637 ;;  upper_bits      1    2[COMRAM] unsigned char 
   638 ;; Return value:  Size  Location     Type
   639 ;;                  1    wreg      void 
   640 ;; Registers used:
   641 ;;		wreg, status,2, status,0
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   647 ;;      Params:         0       0       0       0       0       0       0       0       0
   648 ;;      Locals:         3       0       0       0       0       0       0       0       0
   649 ;;      Temps:          1       0       0       0       0       0       0       0       0
   650 ;;      Totals:         4       0       0       0       0       0       0       0       0
   651 ;;Total ram usage:        4 bytes
   652 ;; Hardware stack levels used: 1
   653 ;; This function calls:
   654 ;;		Nothing
   655 ;; This function is called by:
   656 ;;		_FM_Lcd_Send_Command
   657 ;;		_FM_Lcd_Send_Character
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           	psect	text7
   662  000808                     __ptext7:
   663                           	callstack 0
   664  000808                     _FM_Lcd_Send_Nibble:
   665                           	callstack 28
   666                           
   667                           ;incstack = 0
   668                           ;FM_Lcd_Send_Nibble@byte_to_send stored from wreg
   669  000808  6E02               	movwf	FM_Lcd_Send_Nibble@byte_to_send^0,c
   670  00080A                     
   671                           ;FM_LCD16X2_Easy.c: 19: void FM_Lcd_Send_Nibble (char byte_to_send);FM_LCD16X2_Easy.c: 2
      +                          0: {;FM_LCD16X2_Easy.c: 21:     char upper_bits, lower_bits;;FM_LCD16X2_Easy.c: 23:     
      +                          upper_bits = (byte_to_send & 0xF0);
   672  00080A  5002               	movf	FM_Lcd_Send_Nibble@byte_to_send^0,w,c
   673  00080C  0BF0               	andlw	240
   674  00080E  6E03               	movwf	FM_Lcd_Send_Nibble@upper_bits^0,c
   675                           
   676                           ;FM_LCD16X2_Easy.c: 24:     lower_bits = (byte_to_send & 0x0F) << 4;
   677  000810  C002  F001         	movff	FM_Lcd_Send_Nibble@byte_to_send,??_FM_Lcd_Send_Nibble
   678  000814  0E0F               	movlw	15
   679  000816  1601               	andwf	??_FM_Lcd_Send_Nibble^0,f,c
   680  000818  3801               	swapf	??_FM_Lcd_Send_Nibble^0,w,c
   681  00081A  0BF0               	andlw	240
   682  00081C  6E04               	movwf	FM_Lcd_Send_Nibble@lower_bits^0,c
   683                           
   684                           ;FM_LCD16X2_Easy.c: 30:     LATD |= upper_bits;
   685  00081E  5003               	movf	FM_Lcd_Send_Nibble@upper_bits^0,w,c	;volatile
   686  000820  128C               	iorwf	140,f,c	;volatile
   687  000822                     
   688                           ;FM_LCD16X2_Easy.c: 31:     LATD |= (1 << 3);; _delay((unsigned long)((1)*(20000000/4000
      +                          .0))); LATD &= ~(1 << 3);; _delay((unsigned long)((1)*(20000000/4000.0)));;
   689  000822  868C               	bsf	140,3,c	;volatile
   690  000824  0E07               	movlw	7
   691  000826  6E01               	movwf	??_FM_Lcd_Send_Nibble^0,c
   692  000828  0E7D               	movlw	125
   693  00082A                     u87:
   694  00082A  2EE8               	decfsz	wreg,f,c
   695  00082C  D7FE               	bra	u87
   696  00082E  2E01               	decfsz	??_FM_Lcd_Send_Nibble^0,f,c
   697  000830  D7FC               	bra	u87
   698  000832  F000               	nop	
   699  000834  968C               	bcf	140,3,c	;volatile
   700  000836  0E07               	movlw	7
   701  000838  6E01               	movwf	??_FM_Lcd_Send_Nibble^0,c
   702  00083A  0E7D               	movlw	125
   703  00083C                     u97:
   704  00083C  2EE8               	decfsz	wreg,f,c
   705  00083E  D7FE               	bra	u97
   706  000840  2E01               	decfsz	??_FM_Lcd_Send_Nibble^0,f,c
   707  000842  D7FC               	bra	u97
   708  000844  F000               	nop	
   709  000846                     
   710                           ;FM_LCD16X2_Easy.c: 32:     LATD &= ~upper_bits;
   711  000846  5003               	movf	FM_Lcd_Send_Nibble@upper_bits^0,w,c	;volatile
   712  000848  0AFF               	xorlw	255
   713  00084A  168C               	andwf	140,f,c	;volatile
   714  00084C                     
   715                           ;FM_LCD16X2_Easy.c: 33:     LATD |= lower_bits;
   716  00084C  5004               	movf	FM_Lcd_Send_Nibble@lower_bits^0,w,c	;volatile
   717  00084E  128C               	iorwf	140,f,c	;volatile
   718                           
   719                           ;FM_LCD16X2_Easy.c: 34:     LATD |= (1 << 3);; _delay((unsigned long)((1)*(20000000/4000
      +                          .0))); LATD &= ~(1 << 3);; _delay((unsigned long)((1)*(20000000/4000.0)));;
   720  000850  868C               	bsf	140,3,c	;volatile
   721  000852  0E07               	movlw	7
   722  000854  6E01               	movwf	??_FM_Lcd_Send_Nibble^0,c
   723  000856  0E7D               	movlw	125
   724  000858                     u107:
   725  000858  2EE8               	decfsz	wreg,f,c
   726  00085A  D7FE               	bra	u107
   727  00085C  2E01               	decfsz	??_FM_Lcd_Send_Nibble^0,f,c
   728  00085E  D7FC               	bra	u107
   729  000860  F000               	nop	
   730  000862  968C               	bcf	140,3,c	;volatile
   731  000864  0E07               	movlw	7
   732  000866  6E01               	movwf	??_FM_Lcd_Send_Nibble^0,c
   733  000868  0E7D               	movlw	125
   734  00086A                     u117:
   735  00086A  2EE8               	decfsz	wreg,f,c
   736  00086C  D7FE               	bra	u117
   737  00086E  2E01               	decfsz	??_FM_Lcd_Send_Nibble^0,f,c
   738  000870  D7FC               	bra	u117
   739  000872  F000               	nop	
   740  000874                     
   741                           ;FM_LCD16X2_Easy.c: 35:     LATD &= ~lower_bits;
   742  000874  5004               	movf	FM_Lcd_Send_Nibble@lower_bits^0,w,c	;volatile
   743  000876  0AFF               	xorlw	255
   744  000878  168C               	andwf	140,f,c	;volatile
   745  00087A  0012               	return		;funcret
   746  00087C                     __end_of_FM_Lcd_Send_Nibble:
   747                           	callstack 0
   748                           
   749 ;; *************** function _FM_Lcd_Easy_Gpio_Init *****************
   750 ;; Defined at:
   751 ;;		line 7 in file "FM_LCD16X2_Easy.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;		None
   754 ;; Auto vars:     Size  Location     Type
   755 ;;  bits_data       1    0        unsigned char 
   756 ;; Return value:  Size  Location     Type
   757 ;;                  1    wreg      void 
   758 ;; Registers used:
   759 ;;		wreg, status,2, status,0
   760 ;; Tracked objects:
   761 ;;		On entry : 0/0
   762 ;;		On exit  : 0/0
   763 ;;		Unchanged: 0/0
   764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   765 ;;      Params:         0       0       0       0       0       0       0       0       0
   766 ;;      Locals:         0       0       0       0       0       0       0       0       0
   767 ;;      Temps:          0       0       0       0       0       0       0       0       0
   768 ;;      Totals:         0       0       0       0       0       0       0       0       0
   769 ;;Total ram usage:        0 bytes
   770 ;; Hardware stack levels used: 1
   771 ;; This function calls:
   772 ;;		Nothing
   773 ;; This function is called by:
   774 ;;		_FM_Lcd_Easy_Init
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778                           	psect	text8
   779  0009A0                     __ptext8:
   780                           	callstack 0
   781  0009A0                     _FM_Lcd_Easy_Gpio_Init:
   782                           	callstack 29
   783  0009A0                     
   784                           ;FM_LCD16X2_Easy.c: 15:     TRISD = 0x00;
   785  0009A0  0E00               	movlw	0
   786  0009A2  6E95               	movwf	149,c	;volatile
   787  0009A4                     
   788                           ;FM_LCD16X2_Easy.c: 16:     LATD &= ~(1 << 2);
   789  0009A4  948C               	bcf	140,2,c	;volatile
   790  0009A6  0012               	return		;funcret
   791  0009A8                     __end_of_FM_Lcd_Easy_Gpio_Init:
   792                           	callstack 0
   793                           
   794                           	psect	rparam
   795  0000                     
   796                           	psect	idloc
   797                           
   798                           ;Config register IDLOC0 @ 0x200000
   799                           ;	unspecified, using default values
   800  200000                     	org	2097152
   801  200000  FF                 	db	255
   802                           
   803                           ;Config register IDLOC1 @ 0x200001
   804                           ;	unspecified, using default values
   805  200001                     	org	2097153
   806  200001  FF                 	db	255
   807                           
   808                           ;Config register IDLOC2 @ 0x200002
   809                           ;	unspecified, using default values
   810  200002                     	org	2097154
   811  200002  FF                 	db	255
   812                           
   813                           ;Config register IDLOC3 @ 0x200003
   814                           ;	unspecified, using default values
   815  200003                     	org	2097155
   816  200003  FF                 	db	255
   817                           
   818                           ;Config register IDLOC4 @ 0x200004
   819                           ;	unspecified, using default values
   820  200004                     	org	2097156
   821  200004  FF                 	db	255
   822                           
   823                           ;Config register IDLOC5 @ 0x200005
   824                           ;	unspecified, using default values
   825  200005                     	org	2097157
   826  200005  FF                 	db	255
   827                           
   828                           ;Config register IDLOC6 @ 0x200006
   829                           ;	unspecified, using default values
   830  200006                     	org	2097158
   831  200006  FF                 	db	255
   832                           
   833                           ;Config register IDLOC7 @ 0x200007
   834                           ;	unspecified, using default values
   835  200007                     	org	2097159
   836  200007  FF                 	db	255
   837                           
   838                           	psect	config
   839                           
   840                           ;Config register CONFIG1L @ 0x300000
   841                           ;	PLL Prescaler Selection bits
   842                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   843                           ;	System Clock Postscaler Selection bits
   844                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   845                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   846                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   847  300000                     	org	3145728
   848  300000  00                 	db	0
   849                           
   850                           ;Config register CONFIG1H @ 0x300001
   851                           ;	Oscillator Selection bits
   852                           ;	FOSC = HS, HS oscillator (HS)
   853                           ;	Fail-Safe Clock Monitor Enable bit
   854                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   855                           ;	Internal/External Oscillator Switchover bit
   856                           ;	IESO = OFF, Oscillator Switchover mode disabled
   857  300001                     	org	3145729
   858  300001  0C                 	db	12
   859                           
   860                           ;Config register CONFIG2L @ 0x300002
   861                           ;	Power-up Timer Enable bit
   862                           ;	PWRT = OFF, PWRT disabled
   863                           ;	Brown-out Reset Enable bits
   864                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   865                           ;	Brown-out Reset Voltage bits
   866                           ;	BORV = 3, Minimum setting 2.05V
   867                           ;	USB Voltage Regulator Enable bit
   868                           ;	VREGEN = OFF, USB voltage regulator disabled
   869  300002                     	org	3145730
   870  300002  19                 	db	25
   871                           
   872                           ;Config register CONFIG2H @ 0x300003
   873                           ;	Watchdog Timer Enable bit
   874                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   875                           ;	Watchdog Timer Postscale Select bits
   876                           ;	WDTPS = 32768, 1:32768
   877  300003                     	org	3145731
   878  300003  1E                 	db	30
   879                           
   880                           ; Padding undefined space
   881  300004                     	org	3145732
   882  300004  FF                 	db	255
   883                           
   884                           ;Config register CONFIG3H @ 0x300005
   885                           ;	CCP2 MUX bit
   886                           ;	CCP2MX = OFF, CCP2 input/output is multiplexed with RB3
   887                           ;	PORTB A/D Enable bit
   888                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   889                           ;	Low-Power Timer 1 Oscillator Enable bit
   890                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   891                           ;	MCLR Pin Enable bit
   892                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   893  300005                     	org	3145733
   894  300005  80                 	db	128
   895                           
   896                           ;Config register CONFIG4L @ 0x300006
   897                           ;	Stack Full/Underflow Reset Enable bit
   898                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
   899                           ;	Single-Supply ICSP Enable bit
   900                           ;	LVP = OFF, Single-Supply ICSP disabled
   901                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   902                           ;	ICPRT = OFF, ICPORT disabled
   903                           ;	Extended Instruction Set Enable bit
   904                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   905                           ;	Background Debugger Enable bit
   906                           ;	DEBUG = 0x1, unprogrammed default
   907  300006                     	org	3145734
   908  300006  80                 	db	128
   909                           
   910                           ; Padding undefined space
   911  300007                     	org	3145735
   912  300007  FF                 	db	255
   913                           
   914                           ;Config register CONFIG5L @ 0x300008
   915                           ;	Code Protection bit
   916                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   917                           ;	Code Protection bit
   918                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   919                           ;	Code Protection bit
   920                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   921                           ;	Code Protection bit
   922                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   923  300008                     	org	3145736
   924  300008  0F                 	db	15
   925                           
   926                           ;Config register CONFIG5H @ 0x300009
   927                           ;	Boot Block Code Protection bit
   928                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   929                           ;	Data EEPROM Code Protection bit
   930                           ;	CPD = OFF, Data EEPROM is not code-protected
   931  300009                     	org	3145737
   932  300009  C0                 	db	192
   933                           
   934                           ;Config register CONFIG6L @ 0x30000A
   935                           ;	Write Protection bit
   936                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   937                           ;	Write Protection bit
   938                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   939                           ;	Write Protection bit
   940                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   941                           ;	Write Protection bit
   942                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   943  30000A                     	org	3145738
   944  30000A  0F                 	db	15
   945                           
   946                           ;Config register CONFIG6H @ 0x30000B
   947                           ;	Configuration Register Write Protection bit
   948                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   949                           ;	Boot Block Write Protection bit
   950                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   951                           ;	Data EEPROM Write Protection bit
   952                           ;	WRTD = OFF, Data EEPROM is not write-protected
   953  30000B                     	org	3145739
   954  30000B  E0                 	db	224
   955                           
   956                           ;Config register CONFIG7L @ 0x30000C
   957                           ;	Table Read Protection bit
   958                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   959                           ;	Table Read Protection bit
   960                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   961                           ;	Table Read Protection bit
   962                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   963                           ;	Table Read Protection bit
   964                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   965  30000C                     	org	3145740
   966  30000C  0F                 	db	15
   967                           
   968                           ;Config register CONFIG7H @ 0x30000D
   969                           ;	Boot Block Table Read Protection bit
   970                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   971  30000D                     	org	3145741
   972  30000D  40                 	db	64
   973                           tosu	equ	0xFFF
   974                           tosh	equ	0xFFE
   975                           tosl	equ	0xFFD
   976                           stkptr	equ	0xFFC
   977                           pclatu	equ	0xFFB
   978                           pclath	equ	0xFFA
   979                           pcl	equ	0xFF9
   980                           tblptru	equ	0xFF8
   981                           tblptrh	equ	0xFF7
   982                           tblptrl	equ	0xFF6
   983                           tablat	equ	0xFF5
   984                           prodh	equ	0xFF4
   985                           prodl	equ	0xFF3
   986                           indf0	equ	0xFEF
   987                           postinc0	equ	0xFEE
   988                           postdec0	equ	0xFED
   989                           preinc0	equ	0xFEC
   990                           plusw0	equ	0xFEB
   991                           fsr0h	equ	0xFEA
   992                           fsr0l	equ	0xFE9
   993                           wreg	equ	0xFE8
   994                           indf1	equ	0xFE7
   995                           postinc1	equ	0xFE6
   996                           postdec1	equ	0xFE5
   997                           preinc1	equ	0xFE4
   998                           plusw1	equ	0xFE3
   999                           fsr1h	equ	0xFE2
  1000                           fsr1l	equ	0xFE1
  1001                           bsr	equ	0xFE0
  1002                           indf2	equ	0xFDF
  1003                           postinc2	equ	0xFDE
  1004                           postdec2	equ	0xFDD
  1005                           preinc2	equ	0xFDC
  1006                           plusw2	equ	0xFDB
  1007                           fsr2h	equ	0xFDA
  1008                           fsr2l	equ	0xFD9
  1009                           status	equ	0xFD8

Data Sizes:
    Strings     5
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      12
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    FM_Lcd_Send_String@cadena	PTR unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_FM_Lcd_Send_String
    _FM_Lcd_Set_Cursor->_FM_Lcd_Send_Command
    _FM_Lcd_Send_String->_FM_Lcd_Send_Character
    _FM_Lcd_Send_Character->_FM_Lcd_Send_Nibble
    _FM_Lcd_Easy_Init->_FM_Lcd_Send_Command
    _FM_Lcd_Send_Command->_FM_Lcd_Send_Nibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     650
                                             10 COMRAM     2     2      0
                   _FM_Lcd_Easy_Init
                 _FM_Lcd_Send_String
                  _FM_Lcd_Set_Cursor
                    _Init_Led_System
 ---------------------------------------------------------------------------------
 (1) _Init_Led_System                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FM_Lcd_Set_Cursor                                    3     2      1     274
                                              5 COMRAM     3     2      1
                _FM_Lcd_Send_Command
 ---------------------------------------------------------------------------------
 (1) _FM_Lcd_Send_String                                   5     3      2     271
                                              5 COMRAM     5     3      2
              _FM_Lcd_Send_Character
 ---------------------------------------------------------------------------------
 (2) _FM_Lcd_Send_Character                                1     1      0     105
                                              4 COMRAM     1     1      0
                 _FM_Lcd_Send_Nibble
 ---------------------------------------------------------------------------------
 (1) _FM_Lcd_Easy_Init                                     0     0      0     105
              _FM_Lcd_Easy_Gpio_Init
                _FM_Lcd_Send_Command
 ---------------------------------------------------------------------------------
 (2) _FM_Lcd_Send_Command                                  1     1      0     105
                                              4 COMRAM     1     1      0
                 _FM_Lcd_Send_Nibble
 ---------------------------------------------------------------------------------
 (3) _FM_Lcd_Send_Nibble                                   4     4      0      90
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _FM_Lcd_Easy_Gpio_Init                                1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FM_Lcd_Easy_Init
     _FM_Lcd_Easy_Gpio_Init
     _FM_Lcd_Send_Command
       _FM_Lcd_Send_Nibble
   _FM_Lcd_Send_String
     _FM_Lcd_Send_Character
       _FM_Lcd_Send_Nibble
   _FM_Lcd_Set_Cursor
     _FM_Lcd_Send_Command
   _Init_Led_System

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      C       C       1       12.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Apr 24 12:37:37 2023

                                    l25 09AC                                      l42 099E  
                                    l51 08CA                                      l36 09A6  
                                    l61 0978                                      l45 0992  
                                    l39 087A                                      l56 0902  
                                    l58 090E                                      u40 08E2  
                                    u41 08DE                                      u50 08FA  
                                    u51 08F6                                      u60 08CA  
                                    u61 08C6                                      u77 093C  
                                    u87 082A                                      u97 083C  
                     ??_Init_Led_System 0001                                     l811 08E2  
                                   l741 0834                                     l821 090E  
                                   l813 08EA                                     l751 0862  
                                   l743 0836                                     l823 087C  
                                   l815 08FA                                     l807 08CE  
                                   l831 0910                                     l753 0874  
                                   l745 0846                                     l737 080A  
                                   l761 0998                                     l825 0884  
                                   l817 0904                                     l809 08D2  
                                   l841 0932                                     l833 0914  
                                   l755 09A0                                     l747 084C  
                                   l739 0822                                     l763 098A  
                                   l827 08A0                                     l819 0908  
                                   l835 0918                                     l757 09A4  
                                   l749 0852                                     l765 098C  
                                   l829 08A2                                     l837 0922  
                                   l759 0996                                     l767 09A8  
                                   l839 092E                                     l769 0950  
                                   u107 0858                                     u117 086A  
                                   wreg 000FE8                                    STR_1 0801  
                                  _LATD 000F8C              __end_of_FM_Lcd_Send_Nibble 087C  
                                  _main 0910            FM_Lcd_Send_Nibble@upper_bits 0003  
            __end_of_FM_Lcd_Send_String 08CC                 ??_FM_Lcd_Send_Character 0005  
                                  start 0000  FM_Lcd_Send_Character@character_to_send 0005  
                 _FM_Lcd_Easy_Gpio_Init 09A0                            ___param_bank 000000  
             __size_of_FM_Lcd_Easy_Init 002A                                   ?_main 0001  
           __end_of_FM_Lcd_Send_Command 09A0                                   _TRISD 000F95  
                                 tablat 000FF5                                   status 000FD8  
                       __initialization 097A                            __end_of_main 0950  
                                ??_main 000B                           __activetblptr 000001  
                ?_FM_Lcd_Easy_Gpio_Init 0001                                  isa$std 000001  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                            __accesstop 0060                 __end_of__initialization 097A  
                         ___rparam_used 000001                         _Init_Led_System 09A8  
                        __pcstackCOMRAM 0001                        _FM_Lcd_Easy_Init 0950  
        __size_of_FM_Lcd_Send_Character 000C           __end_of_FM_Lcd_Send_Character 0994  
                    _FM_Lcd_Send_Nibble 0808                      _FM_Lcd_Send_String 087C  
                   ?_FM_Lcd_Send_Nibble 0001                     ?_FM_Lcd_Send_String 0006  
               __end_of_Init_Led_System 09AE                    ??_FM_Lcd_Send_Nibble 0001  
                  ??_FM_Lcd_Send_String 0008                                 __Hparam 0000  
                               __Lparam 0000                            __psmallconst 0800  
                               __pcinit 097A                                 __ramtop 0800  
                               __ptext0 0910                                 __ptext1 09A8  
                               __ptext2 08CC                                 __ptext3 087C  
                               __ptext4 0988                                 __ptext5 0950  
                               __ptext6 0994                                 __ptext7 0808  
                               __ptext8 09A0            __size_of_FM_Lcd_Send_Command 000C  
                  end_of_initialization 097A                 ??_FM_Lcd_Easy_Gpio_Init 0001  
                FM_Lcd_Set_Cursor@filas 0007                        ?_Init_Led_System 0001  
              __end_of_FM_Lcd_Easy_Init 097A               FM_Lcd_Set_Cursor@base_pos 0008  
                   start_initialization 097A                FM_Lcd_Send_String@cadena 0006  
                 _FM_Lcd_Send_Character 0988                     _FM_Lcd_Send_Command 0994  
                     _FM_Lcd_Set_Cursor 08CC                      ?_FM_Lcd_Set_Cursor 0006  
    FM_Lcd_Send_Command@command_to_send 0005                             __smallconst 0800  
                   ??_FM_Lcd_Set_Cursor 0007                    ?_FM_Lcd_Send_Command 0001  
           __size_of_FM_Lcd_Send_Nibble 0074          __size_of_FM_Lcd_Easy_Gpio_Init 0008  
         __end_of_FM_Lcd_Easy_Gpio_Init 09A8             __size_of_FM_Lcd_Send_String 0050  
             __end_of_FM_Lcd_Set_Cursor 0910                   ??_FM_Lcd_Send_Command 0005  
                     ?_FM_Lcd_Easy_Init 0001                      ??_FM_Lcd_Easy_Init 0006  
               FM_Lcd_Send_String@index 000A                                __Hrparam 0000  
                ?_FM_Lcd_Send_Character 0001                                __Lrparam 0000  
                          __Lsmallconst 0800                           __size_of_main 0040  
              __size_of_Init_Led_System 0006              __size_of_FM_Lcd_Set_Cursor 0044  
                              isa$xinst 000000          FM_Lcd_Send_Nibble@byte_to_send 0002  
              FM_Lcd_Set_Cursor@columna 0006            FM_Lcd_Send_Nibble@lower_bits 0004  
