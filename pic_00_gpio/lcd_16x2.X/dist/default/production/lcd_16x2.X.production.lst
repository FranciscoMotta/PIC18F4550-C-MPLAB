

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Apr 23 23:08:34 2023

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    20  0000                     
    21                           ; Version 2.40
    22                           ; Generated 17/11/2021 GMT
    23                           ; 
    24                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     _TRISD	set	3989
    57  0000                     _LATD	set	3980
    58                           
    59                           	psect	smallconst
    60  000800                     __psmallconst:
    61                           	callstack 0
    62  000800  00                 	db	0
    63  000801                     STR_1:
    64  000801  48                 	db	72	;'H'
    65  000802  4F                 	db	79	;'O'
    66  000803  4C                 	db	76	;'L'
    67  000804  41                 	db	65	;'A'
    68  000805  00                 	db	0
    69  000806  00                 	db	0	; dummy byte at the end
    70  0000                     
    71                           ; #config settings
    72                           
    73                           	psect	cinit
    74  000932                     __pcinit:
    75                           	callstack 0
    76  000932                     start_initialization:
    77                           	callstack 0
    78  000932                     __initialization:
    79                           	callstack 0
    80  000932                     end_of_initialization:
    81                           	callstack 0
    82  000932                     __end_of__initialization:
    83                           	callstack 0
    84  000932  0E00               	movlw	low (__Lsmallconst shr (0+16))
    85  000934  6EF8               	movwf	tblptru,c
    86  000936  0E08               	movlw	high __Lsmallconst
    87  000938  6EF7               	movwf	tblptrh,c
    88  00093A  0100               	movlb	0
    89  00093C  EF66  F004         	goto	_main	;jump to C main() function
    90                           
    91                           	psect	cstackCOMRAM
    92  000001                     __pcstackCOMRAM:
    93                           	callstack 0
    94  000001                     ??_FM_Lcd_Send_Nibble:
    95  000001                     
    96                           ; 2 bytes @ 0x0
    97  000001                     	ds	1
    98  000002                     FM_Lcd_Send_Nibble@byte_to_send:
    99                           	callstack 0
   100                           
   101                           ; 1 bytes @ 0x1
   102  000002                     	ds	1
   103  000003                     FM_Lcd_Send_Nibble@upper_bits:
   104                           	callstack 0
   105                           
   106                           ; 1 bytes @ 0x2
   107  000003                     	ds	1
   108  000004                     FM_Lcd_Send_Nibble@lower_bits:
   109                           	callstack 0
   110                           
   111                           ; 1 bytes @ 0x3
   112  000004                     	ds	1
   113  000005                     FM_Lcd_Send_Command@command_to_send:
   114                           	callstack 0
   115  000005                     FM_Lcd_Send_Character@character_to_send:
   116                           	callstack 0
   117                           
   118                           ; 1 bytes @ 0x4
   119  000005                     	ds	1
   120  000006                     FM_Lcd_Easy_Send_String@cadena:
   121                           	callstack 0
   122                           
   123                           ; 2 bytes @ 0x5
   124  000006                     	ds	2
   125  000008                     ??_FM_Lcd_Easy_Send_String:
   126                           
   127                           ; 1 bytes @ 0x7
   128  000008                     	ds	2
   129  00000A                     FM_Lcd_Easy_Send_String@index:
   130                           	callstack 0
   131                           
   132                           ; 1 bytes @ 0x9
   133  00000A                     	ds	1
   134  00000B                     ??_main:
   135                           
   136                           ; 1 bytes @ 0xA
   137  00000B                     	ds	2
   138                           
   139 ;;
   140 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   141 ;;
   142 ;; *************** function _main *****************
   143 ;; Defined at:
   144 ;;		line 32 in file "main.c"
   145 ;; Parameters:    Size  Location     Type
   146 ;;		None
   147 ;; Auto vars:     Size  Location     Type
   148 ;;		None
   149 ;; Return value:  Size  Location     Type
   150 ;;                  2   18[None  ] int 
   151 ;; Registers used:
   152 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   153 ;; Tracked objects:
   154 ;;		On entry : 0/0
   155 ;;		On exit  : 0/0
   156 ;;		Unchanged: 0/0
   157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   158 ;;      Params:         0       0       0       0       0       0       0       0       0
   159 ;;      Locals:         0       0       0       0       0       0       0       0       0
   160 ;;      Temps:          2       0       0       0       0       0       0       0       0
   161 ;;      Totals:         2       0       0       0       0       0       0       0       0
   162 ;;Total ram usage:        2 bytes
   163 ;; Hardware stack levels required when called: 3
   164 ;; This function calls:
   165 ;;		_FM_Lcd_Easy_Init
   166 ;;		_FM_Lcd_Easy_Send_String
   167 ;;		_FM_Lcd_Send_Command
   168 ;;		_Init_Led_System
   169 ;; This function is called by:
   170 ;;		Startup code after reset
   171 ;; This function uses a non-reentrant model
   172 ;;
   173                           
   174                           	psect	text0
   175  0008CC                     __ptext0:
   176                           	callstack 0
   177  0008CC                     _main:
   178                           	callstack 28
   179  0008CC                     
   180                           ;main.c: 34:     Init_Led_System();
   181  0008CC  ECB0  F004         	call	_Init_Led_System	;wreg free
   182  0008D0                     
   183                           ;main.c: 35:     FM_Lcd_Easy_Init();
   184  0008D0  EC84  F004         	call	_FM_Lcd_Easy_Init	;wreg free
   185  0008D4                     
   186                           ;main.c: 36:     FM_Lcd_Send_Command(0x80);
   187  0008D4  0E80               	movlw	128
   188  0008D6  ECA6  F004         	call	_FM_Lcd_Send_Command
   189  0008DA                     
   190                           ;main.c: 37:     FM_Lcd_Easy_Send_String("HOLA");
   191  0008DA  0E01               	movlw	low STR_1
   192  0008DC  6E06               	movwf	FM_Lcd_Easy_Send_String@cadena^0,c
   193  0008DE  0E08               	movlw	high STR_1
   194  0008E0  6E07               	movwf	(FM_Lcd_Easy_Send_String@cadena+1)^0,c
   195  0008E2  EC3E  F004         	call	_FM_Lcd_Easy_Send_String	;wreg free
   196  0008E6                     l798:
   197                           
   198                           ;main.c: 39:     {;main.c: 40:         LATD ^= (1 << 0);
   199  0008E6  0E01               	movlw	1
   200  0008E8  1A8C               	xorwf	140,f,c	;volatile
   201  0008EA                     
   202                           ;main.c: 41:         _delay((unsigned long)((100)*(20000000UL/4000.0)));
   203  0008EA  0E03               	movlw	3
   204  0008EC  6E0C               	movwf	(??_main+1)^0,c
   205  0008EE  0E8A               	movlw	138
   206  0008F0  6E0B               	movwf	??_main^0,c
   207  0008F2  0E56               	movlw	86
   208  0008F4                     u37:
   209  0008F4  2EE8               	decfsz	wreg,f,c
   210  0008F6  D7FE               	bra	u37
   211  0008F8  2E0B               	decfsz	??_main^0,f,c
   212  0008FA  D7FC               	bra	u37
   213  0008FC  2E0C               	decfsz	(??_main+1)^0,f,c
   214  0008FE  D7FA               	bra	u37
   215  000900  EF73  F004         	goto	l798
   216  000904  EF00  F000         	goto	start
   217  000908                     __end_of_main:
   218                           	callstack 0
   219                           
   220 ;; *************** function _Init_Led_System *****************
   221 ;; Defined at:
   222 ;;		line 50 in file "main.c"
   223 ;; Parameters:    Size  Location     Type
   224 ;;		None
   225 ;; Auto vars:     Size  Location     Type
   226 ;;		None
   227 ;; Return value:  Size  Location     Type
   228 ;;                  1    wreg      void 
   229 ;; Registers used:
   230 ;;		status,2, status,0
   231 ;; Tracked objects:
   232 ;;		On entry : 0/0
   233 ;;		On exit  : 0/0
   234 ;;		Unchanged: 0/0
   235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   236 ;;      Params:         0       0       0       0       0       0       0       0       0
   237 ;;      Locals:         0       0       0       0       0       0       0       0       0
   238 ;;      Temps:          0       0       0       0       0       0       0       0       0
   239 ;;      Totals:         0       0       0       0       0       0       0       0       0
   240 ;;Total ram usage:        0 bytes
   241 ;; Hardware stack levels used: 1
   242 ;; This function calls:
   243 ;;		Nothing
   244 ;; This function is called by:
   245 ;;		_main
   246 ;; This function uses a non-reentrant model
   247 ;;
   248                           
   249                           	psect	text1
   250  000960                     __ptext1:
   251                           	callstack 0
   252  000960                     _Init_Led_System:
   253                           	callstack 30
   254  000960                     
   255                           ;main.c: 53:     TRISD &= ~(1 << 0);
   256  000960  9095               	bcf	149,0,c	;volatile
   257                           
   258                           ;main.c: 54:     LATD &= ~(1 << 0);
   259  000962  908C               	bcf	140,0,c	;volatile
   260  000964  0012               	return		;funcret
   261  000966                     __end_of_Init_Led_System:
   262                           	callstack 0
   263                           
   264 ;; *************** function _FM_Lcd_Easy_Send_String *****************
   265 ;; Defined at:
   266 ;;		line 52 in file "FM_LCD16X2_Easy.c"
   267 ;; Parameters:    Size  Location     Type
   268 ;;  cadena          2    5[COMRAM] PTR unsigned char 
   269 ;;		 -> STR_1(5), 
   270 ;; Auto vars:     Size  Location     Type
   271 ;;  index           1    9[COMRAM] unsigned char 
   272 ;; Return value:  Size  Location     Type
   273 ;;                  1    wreg      void 
   274 ;; Registers used:
   275 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   276 ;; Tracked objects:
   277 ;;		On entry : 0/0
   278 ;;		On exit  : 0/0
   279 ;;		Unchanged: 0/0
   280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   281 ;;      Params:         2       0       0       0       0       0       0       0       0
   282 ;;      Locals:         1       0       0       0       0       0       0       0       0
   283 ;;      Temps:          2       0       0       0       0       0       0       0       0
   284 ;;      Totals:         5       0       0       0       0       0       0       0       0
   285 ;;Total ram usage:        5 bytes
   286 ;; Hardware stack levels used: 1
   287 ;; Hardware stack levels required when called: 2
   288 ;; This function calls:
   289 ;;		_FM_Lcd_Send_Character
   290 ;; This function is called by:
   291 ;;		_main
   292 ;; This function uses a non-reentrant model
   293 ;;
   294                           
   295                           	psect	text2
   296  00087C                     __ptext2:
   297                           	callstack 0
   298  00087C                     _FM_Lcd_Easy_Send_String:
   299                           	callstack 28
   300  00087C                     
   301                           ;FM_LCD16X2_Easy.c: 52: void FM_Lcd_Easy_Send_String (char *cadena);FM_LCD16X2_Easy.c: 5
      +                          3: {;FM_LCD16X2_Easy.c: 54:     uint8_t index = 0;
   302  00087C  0E00               	movlw	0
   303  00087E  6E0A               	movwf	FM_Lcd_Easy_Send_String@index^0,c
   304                           
   305                           ;FM_LCD16X2_Easy.c: 55:     while(cadena[index] != '\0')
   306  000880  EF51  F004         	goto	l788
   307  000884                     l784:
   308                           
   309                           ;FM_LCD16X2_Easy.c: 56:     {;FM_LCD16X2_Easy.c: 57:         FM_Lcd_Send_Character(caden
      +                          a[index]);
   310  000884  500A               	movf	FM_Lcd_Easy_Send_String@index^0,w,c
   311  000886  2406               	addwf	FM_Lcd_Easy_Send_String@cadena^0,w,c
   312  000888  6E08               	movwf	??_FM_Lcd_Easy_Send_String^0,c
   313  00088A  0E00               	movlw	0
   314  00088C  2007               	addwfc	(FM_Lcd_Easy_Send_String@cadena+1)^0,w,c
   315  00088E  6E09               	movwf	(??_FM_Lcd_Easy_Send_String+1)^0,c
   316  000890  C008  FFF6         	movff	??_FM_Lcd_Easy_Send_String,tblptrl
   317  000894  C009  FFF7         	movff	??_FM_Lcd_Easy_Send_String+1,tblptrh
   318  000898                     	if	0	;tblptru may be non-zero
   319  000898                     	endif
   320  000898                     	if	0	;tblptru may be non-zero
   321  000898                     	endif
   322  000898  0008               	tblrd		*
   323  00089A  50F5               	movf	tablat,w,c
   324  00089C  ECA0  F004         	call	_FM_Lcd_Send_Character
   325  0008A0                     
   326                           ;FM_LCD16X2_Easy.c: 58:         index++;
   327  0008A0  2A0A               	incf	FM_Lcd_Easy_Send_String@index^0,f,c
   328  0008A2                     l788:
   329                           
   330                           ;FM_LCD16X2_Easy.c: 55:     while(cadena[index] != '\0')
   331  0008A2  500A               	movf	FM_Lcd_Easy_Send_String@index^0,w,c
   332  0008A4  2406               	addwf	FM_Lcd_Easy_Send_String@cadena^0,w,c
   333  0008A6  6E08               	movwf	??_FM_Lcd_Easy_Send_String^0,c
   334  0008A8  0E00               	movlw	0
   335  0008AA  2007               	addwfc	(FM_Lcd_Easy_Send_String@cadena+1)^0,w,c
   336  0008AC  6E09               	movwf	(??_FM_Lcd_Easy_Send_String+1)^0,c
   337  0008AE  C008  FFF6         	movff	??_FM_Lcd_Easy_Send_String,tblptrl
   338  0008B2  C009  FFF7         	movff	??_FM_Lcd_Easy_Send_String+1,tblptrh
   339  0008B6                     	if	0	;tblptru may be non-zero
   340  0008B6                     	endif
   341  0008B6                     	if	0	;tblptru may be non-zero
   342  0008B6                     	endif
   343  0008B6  0008               	tblrd		*
   344  0008B8  50F5               	movf	tablat,w,c
   345  0008BA  0900               	iorlw	0
   346  0008BC  A4D8               	btfss	status,2,c
   347  0008BE  EF63  F004         	goto	u21
   348  0008C2  EF65  F004         	goto	u20
   349  0008C6                     u21:
   350  0008C6  EF42  F004         	goto	l784
   351  0008CA                     u20:
   352  0008CA  0012               	return		;funcret
   353  0008CC                     __end_of_FM_Lcd_Easy_Send_String:
   354                           	callstack 0
   355                           
   356 ;; *************** function _FM_Lcd_Send_Character *****************
   357 ;; Defined at:
   358 ;;		line 45 in file "FM_LCD16X2_Easy.c"
   359 ;; Parameters:    Size  Location     Type
   360 ;;  character_to    1    wreg     unsigned char 
   361 ;; Auto vars:     Size  Location     Type
   362 ;;  character_to    1    4[COMRAM] unsigned char 
   363 ;; Return value:  Size  Location     Type
   364 ;;                  1    wreg      void 
   365 ;; Registers used:
   366 ;;		wreg, status,2, status,0, cstack
   367 ;; Tracked objects:
   368 ;;		On entry : 0/0
   369 ;;		On exit  : 0/0
   370 ;;		Unchanged: 0/0
   371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   372 ;;      Params:         0       0       0       0       0       0       0       0       0
   373 ;;      Locals:         1       0       0       0       0       0       0       0       0
   374 ;;      Temps:          0       0       0       0       0       0       0       0       0
   375 ;;      Totals:         1       0       0       0       0       0       0       0       0
   376 ;;Total ram usage:        1 bytes
   377 ;; Hardware stack levels used: 1
   378 ;; Hardware stack levels required when called: 1
   379 ;; This function calls:
   380 ;;		_FM_Lcd_Send_Nibble
   381 ;; This function is called by:
   382 ;;		_FM_Lcd_Easy_Send_String
   383 ;; This function uses a non-reentrant model
   384 ;;
   385                           
   386                           	psect	text3
   387  000940                     __ptext3:
   388                           	callstack 0
   389  000940                     _FM_Lcd_Send_Character:
   390                           	callstack 28
   391                           
   392                           ;incstack = 0
   393                           ;FM_Lcd_Send_Character@character_to_send stored from wreg
   394  000940  6E05               	movwf	FM_Lcd_Send_Character@character_to_send^0,c
   395  000942                     
   396                           ;FM_LCD16X2_Easy.c: 45: void FM_Lcd_Send_Character (char character_to_send);FM_LCD16X2_E
      +                          asy.c: 46: {;FM_LCD16X2_Easy.c: 47:     LATD |= (1 << 1);;
   397  000942  828C               	bsf	140,1,c	;volatile
   398  000944                     
   399                           ;FM_LCD16X2_Easy.c: 48:     FM_Lcd_Send_Nibble(character_to_send);
   400  000944  5005               	movf	FM_Lcd_Send_Character@character_to_send^0,w,c
   401  000946  EC04  F004         	call	_FM_Lcd_Send_Nibble
   402  00094A  0012               	return		;funcret
   403  00094C                     __end_of_FM_Lcd_Send_Character:
   404                           	callstack 0
   405                           
   406 ;; *************** function _FM_Lcd_Easy_Init *****************
   407 ;; Defined at:
   408 ;;		line 62 in file "FM_LCD16X2_Easy.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;		None
   411 ;; Auto vars:     Size  Location     Type
   412 ;;		None
   413 ;; Return value:  Size  Location     Type
   414 ;;                  1    wreg      void 
   415 ;; Registers used:
   416 ;;		wreg, status,2, status,0, cstack
   417 ;; Tracked objects:
   418 ;;		On entry : 0/0
   419 ;;		On exit  : 0/0
   420 ;;		Unchanged: 0/0
   421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   422 ;;      Params:         0       0       0       0       0       0       0       0       0
   423 ;;      Locals:         0       0       0       0       0       0       0       0       0
   424 ;;      Temps:          0       0       0       0       0       0       0       0       0
   425 ;;      Totals:         0       0       0       0       0       0       0       0       0
   426 ;;Total ram usage:        0 bytes
   427 ;; Hardware stack levels used: 1
   428 ;; Hardware stack levels required when called: 2
   429 ;; This function calls:
   430 ;;		_FM_Lcd_Easy_Gpio_Init
   431 ;;		_FM_Lcd_Send_Command
   432 ;; This function is called by:
   433 ;;		_main
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437                           	psect	text4
   438  000908                     __ptext4:
   439                           	callstack 0
   440  000908                     _FM_Lcd_Easy_Init:
   441                           	callstack 28
   442  000908                     
   443                           ;FM_LCD16X2_Easy.c: 64:     FM_Lcd_Easy_Gpio_Init();
   444  000908  ECAC  F004         	call	_FM_Lcd_Easy_Gpio_Init	;wreg free
   445                           
   446                           ;FM_LCD16X2_Easy.c: 66:     FM_Lcd_Send_Command(0x01);
   447  00090C  0E01               	movlw	1
   448  00090E  ECA6  F004         	call	_FM_Lcd_Send_Command
   449                           
   450                           ;FM_LCD16X2_Easy.c: 67:     FM_Lcd_Send_Command(0x02);
   451  000912  0E02               	movlw	2
   452  000914  ECA6  F004         	call	_FM_Lcd_Send_Command
   453                           
   454                           ;FM_LCD16X2_Easy.c: 68:     FM_Lcd_Send_Command(0x06);
   455  000918  0E06               	movlw	6
   456  00091A  ECA6  F004         	call	_FM_Lcd_Send_Command
   457                           
   458                           ;FM_LCD16X2_Easy.c: 69:     FM_Lcd_Send_Command(0x0C);
   459  00091E  0E0C               	movlw	12
   460  000920  ECA6  F004         	call	_FM_Lcd_Send_Command
   461                           
   462                           ;FM_LCD16X2_Easy.c: 70:     FM_Lcd_Send_Command(0x10);
   463  000924  0E10               	movlw	16
   464  000926  ECA6  F004         	call	_FM_Lcd_Send_Command
   465                           
   466                           ;FM_LCD16X2_Easy.c: 71:     FM_Lcd_Send_Command(0x2C);
   467  00092A  0E2C               	movlw	44
   468  00092C  ECA6  F004         	call	_FM_Lcd_Send_Command
   469  000930  0012               	return		;funcret
   470  000932                     __end_of_FM_Lcd_Easy_Init:
   471                           	callstack 0
   472                           
   473 ;; *************** function _FM_Lcd_Send_Command *****************
   474 ;; Defined at:
   475 ;;		line 39 in file "FM_LCD16X2_Easy.c"
   476 ;; Parameters:    Size  Location     Type
   477 ;;  command_to_s    1    wreg     unsigned char 
   478 ;; Auto vars:     Size  Location     Type
   479 ;;  command_to_s    1    4[COMRAM] unsigned char 
   480 ;; Return value:  Size  Location     Type
   481 ;;                  1    wreg      void 
   482 ;; Registers used:
   483 ;;		wreg, status,2, status,0, cstack
   484 ;; Tracked objects:
   485 ;;		On entry : 0/0
   486 ;;		On exit  : 0/0
   487 ;;		Unchanged: 0/0
   488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   489 ;;      Params:         0       0       0       0       0       0       0       0       0
   490 ;;      Locals:         1       0       0       0       0       0       0       0       0
   491 ;;      Temps:          0       0       0       0       0       0       0       0       0
   492 ;;      Totals:         1       0       0       0       0       0       0       0       0
   493 ;;Total ram usage:        1 bytes
   494 ;; Hardware stack levels used: 1
   495 ;; Hardware stack levels required when called: 1
   496 ;; This function calls:
   497 ;;		_FM_Lcd_Send_Nibble
   498 ;; This function is called by:
   499 ;;		_main
   500 ;;		_FM_Lcd_Easy_Init
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504                           	psect	text5
   505  00094C                     __ptext5:
   506                           	callstack 0
   507  00094C                     _FM_Lcd_Send_Command:
   508                           	callstack 29
   509                           
   510                           ;incstack = 0
   511                           ;FM_Lcd_Send_Command@command_to_send stored from wreg
   512  00094C  6E05               	movwf	FM_Lcd_Send_Command@command_to_send^0,c
   513  00094E                     
   514                           ;FM_LCD16X2_Easy.c: 39: void FM_Lcd_Send_Command (char command_to_send);FM_LCD16X2_Easy.
      +                          c: 40: {;FM_LCD16X2_Easy.c: 41:     LATD &= ~(1 << 1);;
   515  00094E  928C               	bcf	140,1,c	;volatile
   516  000950                     
   517                           ;FM_LCD16X2_Easy.c: 42:     FM_Lcd_Send_Nibble(command_to_send);
   518  000950  5005               	movf	FM_Lcd_Send_Command@command_to_send^0,w,c
   519  000952  EC04  F004         	call	_FM_Lcd_Send_Nibble
   520  000956  0012               	return		;funcret
   521  000958                     __end_of_FM_Lcd_Send_Command:
   522                           	callstack 0
   523                           
   524 ;; *************** function _FM_Lcd_Send_Nibble *****************
   525 ;; Defined at:
   526 ;;		line 19 in file "FM_LCD16X2_Easy.c"
   527 ;; Parameters:    Size  Location     Type
   528 ;;  byte_to_send    1    wreg     unsigned char 
   529 ;; Auto vars:     Size  Location     Type
   530 ;;  byte_to_send    1    1[COMRAM] unsigned char 
   531 ;;  lower_bits      1    3[COMRAM] unsigned char 
   532 ;;  upper_bits      1    2[COMRAM] unsigned char 
   533 ;; Return value:  Size  Location     Type
   534 ;;                  1    wreg      void 
   535 ;; Registers used:
   536 ;;		wreg, status,2, status,0
   537 ;; Tracked objects:
   538 ;;		On entry : 0/0
   539 ;;		On exit  : 0/0
   540 ;;		Unchanged: 0/0
   541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   542 ;;      Params:         0       0       0       0       0       0       0       0       0
   543 ;;      Locals:         3       0       0       0       0       0       0       0       0
   544 ;;      Temps:          1       0       0       0       0       0       0       0       0
   545 ;;      Totals:         4       0       0       0       0       0       0       0       0
   546 ;;Total ram usage:        4 bytes
   547 ;; Hardware stack levels used: 1
   548 ;; This function calls:
   549 ;;		Nothing
   550 ;; This function is called by:
   551 ;;		_FM_Lcd_Send_Command
   552 ;;		_FM_Lcd_Send_Character
   553 ;; This function uses a non-reentrant model
   554 ;;
   555                           
   556                           	psect	text6
   557  000808                     __ptext6:
   558                           	callstack 0
   559  000808                     _FM_Lcd_Send_Nibble:
   560                           	callstack 29
   561                           
   562                           ;incstack = 0
   563                           ;FM_Lcd_Send_Nibble@byte_to_send stored from wreg
   564  000808  6E02               	movwf	FM_Lcd_Send_Nibble@byte_to_send^0,c
   565  00080A                     
   566                           ;FM_LCD16X2_Easy.c: 19: void FM_Lcd_Send_Nibble (char byte_to_send);FM_LCD16X2_Easy.c: 2
      +                          0: {;FM_LCD16X2_Easy.c: 21:     char upper_bits, lower_bits;;FM_LCD16X2_Easy.c: 23:     
      +                          upper_bits = (byte_to_send & 0xF0);
   567  00080A  5002               	movf	FM_Lcd_Send_Nibble@byte_to_send^0,w,c
   568  00080C  0BF0               	andlw	240
   569  00080E  6E03               	movwf	FM_Lcd_Send_Nibble@upper_bits^0,c
   570                           
   571                           ;FM_LCD16X2_Easy.c: 24:     lower_bits = (byte_to_send & 0x0F) << 4;
   572  000810  C002  F001         	movff	FM_Lcd_Send_Nibble@byte_to_send,??_FM_Lcd_Send_Nibble
   573  000814  0E0F               	movlw	15
   574  000816  1601               	andwf	??_FM_Lcd_Send_Nibble^0,f,c
   575  000818  3801               	swapf	??_FM_Lcd_Send_Nibble^0,w,c
   576  00081A  0BF0               	andlw	240
   577  00081C  6E04               	movwf	FM_Lcd_Send_Nibble@lower_bits^0,c
   578                           
   579                           ;FM_LCD16X2_Easy.c: 30:     LATD |= upper_bits;
   580  00081E  5003               	movf	FM_Lcd_Send_Nibble@upper_bits^0,w,c	;volatile
   581  000820  128C               	iorwf	140,f,c	;volatile
   582  000822                     
   583                           ;FM_LCD16X2_Easy.c: 31:     LATD |= (1 << 3);; _delay((unsigned long)((1)*(20000000/4000
      +                          .0))); LATD &= ~(1 << 3);; _delay((unsigned long)((1)*(20000000/4000.0)));;
   584  000822  868C               	bsf	140,3,c	;volatile
   585  000824  0E07               	movlw	7
   586  000826  6E01               	movwf	??_FM_Lcd_Send_Nibble^0,c
   587  000828  0E7D               	movlw	125
   588  00082A                     u47:
   589  00082A  2EE8               	decfsz	wreg,f,c
   590  00082C  D7FE               	bra	u47
   591  00082E  2E01               	decfsz	??_FM_Lcd_Send_Nibble^0,f,c
   592  000830  D7FC               	bra	u47
   593  000832  F000               	nop	
   594  000834  968C               	bcf	140,3,c	;volatile
   595  000836  0E07               	movlw	7
   596  000838  6E01               	movwf	??_FM_Lcd_Send_Nibble^0,c
   597  00083A  0E7D               	movlw	125
   598  00083C                     u57:
   599  00083C  2EE8               	decfsz	wreg,f,c
   600  00083E  D7FE               	bra	u57
   601  000840  2E01               	decfsz	??_FM_Lcd_Send_Nibble^0,f,c
   602  000842  D7FC               	bra	u57
   603  000844  F000               	nop	
   604  000846                     
   605                           ;FM_LCD16X2_Easy.c: 32:     LATD &= ~upper_bits;
   606  000846  5003               	movf	FM_Lcd_Send_Nibble@upper_bits^0,w,c	;volatile
   607  000848  0AFF               	xorlw	255
   608  00084A  168C               	andwf	140,f,c	;volatile
   609  00084C                     
   610                           ;FM_LCD16X2_Easy.c: 33:     LATD |= lower_bits;
   611  00084C  5004               	movf	FM_Lcd_Send_Nibble@lower_bits^0,w,c	;volatile
   612  00084E  128C               	iorwf	140,f,c	;volatile
   613                           
   614                           ;FM_LCD16X2_Easy.c: 34:     LATD |= (1 << 3);; _delay((unsigned long)((1)*(20000000/4000
      +                          .0))); LATD &= ~(1 << 3);; _delay((unsigned long)((1)*(20000000/4000.0)));;
   615  000850  868C               	bsf	140,3,c	;volatile
   616  000852  0E07               	movlw	7
   617  000854  6E01               	movwf	??_FM_Lcd_Send_Nibble^0,c
   618  000856  0E7D               	movlw	125
   619  000858                     u67:
   620  000858  2EE8               	decfsz	wreg,f,c
   621  00085A  D7FE               	bra	u67
   622  00085C  2E01               	decfsz	??_FM_Lcd_Send_Nibble^0,f,c
   623  00085E  D7FC               	bra	u67
   624  000860  F000               	nop	
   625  000862  968C               	bcf	140,3,c	;volatile
   626  000864  0E07               	movlw	7
   627  000866  6E01               	movwf	??_FM_Lcd_Send_Nibble^0,c
   628  000868  0E7D               	movlw	125
   629  00086A                     u77:
   630  00086A  2EE8               	decfsz	wreg,f,c
   631  00086C  D7FE               	bra	u77
   632  00086E  2E01               	decfsz	??_FM_Lcd_Send_Nibble^0,f,c
   633  000870  D7FC               	bra	u77
   634  000872  F000               	nop	
   635  000874                     
   636                           ;FM_LCD16X2_Easy.c: 35:     LATD &= ~lower_bits;
   637  000874  5004               	movf	FM_Lcd_Send_Nibble@lower_bits^0,w,c	;volatile
   638  000876  0AFF               	xorlw	255
   639  000878  168C               	andwf	140,f,c	;volatile
   640  00087A  0012               	return		;funcret
   641  00087C                     __end_of_FM_Lcd_Send_Nibble:
   642                           	callstack 0
   643                           
   644 ;; *************** function _FM_Lcd_Easy_Gpio_Init *****************
   645 ;; Defined at:
   646 ;;		line 7 in file "FM_LCD16X2_Easy.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;		None
   649 ;; Auto vars:     Size  Location     Type
   650 ;;  bits_data       1    0        unsigned char 
   651 ;; Return value:  Size  Location     Type
   652 ;;                  1    wreg      void 
   653 ;; Registers used:
   654 ;;		wreg, status,2, status,0
   655 ;; Tracked objects:
   656 ;;		On entry : 0/0
   657 ;;		On exit  : 0/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   660 ;;      Params:         0       0       0       0       0       0       0       0       0
   661 ;;      Locals:         0       0       0       0       0       0       0       0       0
   662 ;;      Temps:          0       0       0       0       0       0       0       0       0
   663 ;;      Totals:         0       0       0       0       0       0       0       0       0
   664 ;;Total ram usage:        0 bytes
   665 ;; Hardware stack levels used: 1
   666 ;; This function calls:
   667 ;;		Nothing
   668 ;; This function is called by:
   669 ;;		_FM_Lcd_Easy_Init
   670 ;; This function uses a non-reentrant model
   671 ;;
   672                           
   673                           	psect	text7
   674  000958                     __ptext7:
   675                           	callstack 0
   676  000958                     _FM_Lcd_Easy_Gpio_Init:
   677                           	callstack 29
   678  000958                     
   679                           ;FM_LCD16X2_Easy.c: 15:     TRISD = 0x00;
   680  000958  0E00               	movlw	0
   681  00095A  6E95               	movwf	149,c	;volatile
   682  00095C                     
   683                           ;FM_LCD16X2_Easy.c: 16:     LATD &= ~(1 << 2);
   684  00095C  948C               	bcf	140,2,c	;volatile
   685  00095E  0012               	return		;funcret
   686  000960                     __end_of_FM_Lcd_Easy_Gpio_Init:
   687                           	callstack 0
   688                           
   689                           	psect	rparam
   690  0000                     
   691                           	psect	idloc
   692                           
   693                           ;Config register IDLOC0 @ 0x200000
   694                           ;	unspecified, using default values
   695  200000                     	org	2097152
   696  200000  FF                 	db	255
   697                           
   698                           ;Config register IDLOC1 @ 0x200001
   699                           ;	unspecified, using default values
   700  200001                     	org	2097153
   701  200001  FF                 	db	255
   702                           
   703                           ;Config register IDLOC2 @ 0x200002
   704                           ;	unspecified, using default values
   705  200002                     	org	2097154
   706  200002  FF                 	db	255
   707                           
   708                           ;Config register IDLOC3 @ 0x200003
   709                           ;	unspecified, using default values
   710  200003                     	org	2097155
   711  200003  FF                 	db	255
   712                           
   713                           ;Config register IDLOC4 @ 0x200004
   714                           ;	unspecified, using default values
   715  200004                     	org	2097156
   716  200004  FF                 	db	255
   717                           
   718                           ;Config register IDLOC5 @ 0x200005
   719                           ;	unspecified, using default values
   720  200005                     	org	2097157
   721  200005  FF                 	db	255
   722                           
   723                           ;Config register IDLOC6 @ 0x200006
   724                           ;	unspecified, using default values
   725  200006                     	org	2097158
   726  200006  FF                 	db	255
   727                           
   728                           ;Config register IDLOC7 @ 0x200007
   729                           ;	unspecified, using default values
   730  200007                     	org	2097159
   731  200007  FF                 	db	255
   732                           
   733                           	psect	config
   734                           
   735                           ;Config register CONFIG1L @ 0x300000
   736                           ;	PLL Prescaler Selection bits
   737                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   738                           ;	System Clock Postscaler Selection bits
   739                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   740                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   741                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   742  300000                     	org	3145728
   743  300000  00                 	db	0
   744                           
   745                           ;Config register CONFIG1H @ 0x300001
   746                           ;	Oscillator Selection bits
   747                           ;	FOSC = HS, HS oscillator (HS)
   748                           ;	Fail-Safe Clock Monitor Enable bit
   749                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   750                           ;	Internal/External Oscillator Switchover bit
   751                           ;	IESO = OFF, Oscillator Switchover mode disabled
   752  300001                     	org	3145729
   753  300001  0C                 	db	12
   754                           
   755                           ;Config register CONFIG2L @ 0x300002
   756                           ;	Power-up Timer Enable bit
   757                           ;	PWRT = OFF, PWRT disabled
   758                           ;	Brown-out Reset Enable bits
   759                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   760                           ;	Brown-out Reset Voltage bits
   761                           ;	BORV = 3, Minimum setting 2.05V
   762                           ;	USB Voltage Regulator Enable bit
   763                           ;	VREGEN = OFF, USB voltage regulator disabled
   764  300002                     	org	3145730
   765  300002  19                 	db	25
   766                           
   767                           ;Config register CONFIG2H @ 0x300003
   768                           ;	Watchdog Timer Enable bit
   769                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   770                           ;	Watchdog Timer Postscale Select bits
   771                           ;	WDTPS = 32768, 1:32768
   772  300003                     	org	3145731
   773  300003  1E                 	db	30
   774                           
   775                           ; Padding undefined space
   776  300004                     	org	3145732
   777  300004  FF                 	db	255
   778                           
   779                           ;Config register CONFIG3H @ 0x300005
   780                           ;	CCP2 MUX bit
   781                           ;	CCP2MX = OFF, CCP2 input/output is multiplexed with RB3
   782                           ;	PORTB A/D Enable bit
   783                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   784                           ;	Low-Power Timer 1 Oscillator Enable bit
   785                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   786                           ;	MCLR Pin Enable bit
   787                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   788  300005                     	org	3145733
   789  300005  80                 	db	128
   790                           
   791                           ;Config register CONFIG4L @ 0x300006
   792                           ;	Stack Full/Underflow Reset Enable bit
   793                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
   794                           ;	Single-Supply ICSP Enable bit
   795                           ;	LVP = OFF, Single-Supply ICSP disabled
   796                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
   797                           ;	ICPRT = OFF, ICPORT disabled
   798                           ;	Extended Instruction Set Enable bit
   799                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   800                           ;	Background Debugger Enable bit
   801                           ;	DEBUG = 0x1, unprogrammed default
   802  300006                     	org	3145734
   803  300006  80                 	db	128
   804                           
   805                           ; Padding undefined space
   806  300007                     	org	3145735
   807  300007  FF                 	db	255
   808                           
   809                           ;Config register CONFIG5L @ 0x300008
   810                           ;	Code Protection bit
   811                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
   812                           ;	Code Protection bit
   813                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   814                           ;	Code Protection bit
   815                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
   816                           ;	Code Protection bit
   817                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
   818  300008                     	org	3145736
   819  300008  0F                 	db	15
   820                           
   821                           ;Config register CONFIG5H @ 0x300009
   822                           ;	Boot Block Code Protection bit
   823                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
   824                           ;	Data EEPROM Code Protection bit
   825                           ;	CPD = OFF, Data EEPROM is not code-protected
   826  300009                     	org	3145737
   827  300009  C0                 	db	192
   828                           
   829                           ;Config register CONFIG6L @ 0x30000A
   830                           ;	Write Protection bit
   831                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
   832                           ;	Write Protection bit
   833                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   834                           ;	Write Protection bit
   835                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
   836                           ;	Write Protection bit
   837                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
   838  30000A                     	org	3145738
   839  30000A  0F                 	db	15
   840                           
   841                           ;Config register CONFIG6H @ 0x30000B
   842                           ;	Configuration Register Write Protection bit
   843                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   844                           ;	Boot Block Write Protection bit
   845                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
   846                           ;	Data EEPROM Write Protection bit
   847                           ;	WRTD = OFF, Data EEPROM is not write-protected
   848  30000B                     	org	3145739
   849  30000B  E0                 	db	224
   850                           
   851                           ;Config register CONFIG7L @ 0x30000C
   852                           ;	Table Read Protection bit
   853                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
   854                           ;	Table Read Protection bit
   855                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   856                           ;	Table Read Protection bit
   857                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
   858                           ;	Table Read Protection bit
   859                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
   860  30000C                     	org	3145740
   861  30000C  0F                 	db	15
   862                           
   863                           ;Config register CONFIG7H @ 0x30000D
   864                           ;	Boot Block Table Read Protection bit
   865                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
   866  30000D                     	org	3145741
   867  30000D  40                 	db	64
   868                           tosu	equ	0xFFF
   869                           tosh	equ	0xFFE
   870                           tosl	equ	0xFFD
   871                           stkptr	equ	0xFFC
   872                           pclatu	equ	0xFFB
   873                           pclath	equ	0xFFA
   874                           pcl	equ	0xFF9
   875                           tblptru	equ	0xFF8
   876                           tblptrh	equ	0xFF7
   877                           tblptrl	equ	0xFF6
   878                           tablat	equ	0xFF5
   879                           prodh	equ	0xFF4
   880                           prodl	equ	0xFF3
   881                           indf0	equ	0xFEF
   882                           postinc0	equ	0xFEE
   883                           postdec0	equ	0xFED
   884                           preinc0	equ	0xFEC
   885                           plusw0	equ	0xFEB
   886                           fsr0h	equ	0xFEA
   887                           fsr0l	equ	0xFE9
   888                           wreg	equ	0xFE8
   889                           indf1	equ	0xFE7
   890                           postinc1	equ	0xFE6
   891                           postdec1	equ	0xFE5
   892                           preinc1	equ	0xFE4
   893                           plusw1	equ	0xFE3
   894                           fsr1h	equ	0xFE2
   895                           fsr1l	equ	0xFE1
   896                           bsr	equ	0xFE0
   897                           indf2	equ	0xFDF
   898                           postinc2	equ	0xFDE
   899                           postdec2	equ	0xFDD
   900                           preinc2	equ	0xFDC
   901                           plusw2	equ	0xFDB
   902                           fsr2h	equ	0xFDA
   903                           fsr2l	equ	0xFD9
   904                           status	equ	0xFD8

Data Sizes:
    Strings     5
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     12      12
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    FM_Lcd_Easy_Send_String@cadena	PTR unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_FM_Lcd_Easy_Send_String
    _FM_Lcd_Easy_Send_String->_FM_Lcd_Send_Character
    _FM_Lcd_Send_Character->_FM_Lcd_Send_Nibble
    _FM_Lcd_Easy_Init->_FM_Lcd_Send_Command
    _FM_Lcd_Send_Command->_FM_Lcd_Send_Nibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     481
                                             10 COMRAM     2     2      0
                   _FM_Lcd_Easy_Init
            _FM_Lcd_Easy_Send_String
                _FM_Lcd_Send_Command
                    _Init_Led_System
 ---------------------------------------------------------------------------------
 (1) _Init_Led_System                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FM_Lcd_Easy_Send_String                              5     3      2     271
                                              5 COMRAM     5     3      2
              _FM_Lcd_Send_Character
 ---------------------------------------------------------------------------------
 (2) _FM_Lcd_Send_Character                                1     1      0     105
                                              4 COMRAM     1     1      0
                 _FM_Lcd_Send_Nibble
 ---------------------------------------------------------------------------------
 (1) _FM_Lcd_Easy_Init                                     0     0      0     105
              _FM_Lcd_Easy_Gpio_Init
                _FM_Lcd_Send_Command
 ---------------------------------------------------------------------------------
 (1) _FM_Lcd_Send_Command                                  1     1      0     105
                                              4 COMRAM     1     1      0
                 _FM_Lcd_Send_Nibble
 ---------------------------------------------------------------------------------
 (2) _FM_Lcd_Send_Nibble                                   4     4      0      90
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _FM_Lcd_Easy_Gpio_Init                                1     1      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FM_Lcd_Easy_Init
     _FM_Lcd_Easy_Gpio_Init
     _FM_Lcd_Send_Command
       _FM_Lcd_Send_Nibble
   _FM_Lcd_Easy_Send_String
     _FM_Lcd_Send_Character
       _FM_Lcd_Send_Nibble
   _FM_Lcd_Send_Command
   _Init_Led_System

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      C       C       1       12.6%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Apr 23 23:08:34 2023

                                    l40 0956                                      l25 0964  
                                    l34 095E                                      l43 094A  
                                    l52 0930                                      l37 087A  
                                    l49 08CA                                      u20 08CA  
                                    u21 08C6                                      u37 08F4  
                                    u47 082A                                      u57 083C  
                                    u67 0858                                      u77 086A  
       __end_of_FM_Lcd_Easy_Send_String 08CC                       ??_Init_Led_System 0001  
                                   l800 08EA                                     l730 0822  
                                   l740 0852                                     l732 0834  
                                   l750 0958                                     l742 0862  
                                   l734 0836                                     l752 095C  
                                   l744 0874                                     l736 0846  
                                   l728 080A                                     l760 0908  
                                   l738 084C                                     l746 094E  
                                   l754 0942                                     l748 0950  
                                   l756 0944                                     l782 087C  
                                   l758 0960                                     l790 08CC  
                                   l784 0884                                     l792 08D0  
                                   l786 08A0                                     l794 08D4  
                                   l788 08A2                                     l796 08DA  
                                   l798 08E6                                     wreg 000FE8  
                                  STR_1 0801                                    _LATD 000F8C  
            __end_of_FM_Lcd_Send_Nibble 087C                                    _main 08CC  
          FM_Lcd_Send_Nibble@upper_bits 0003                 ??_FM_Lcd_Send_Character 0005  
                                  start 0000  FM_Lcd_Send_Character@character_to_send 0005  
                 _FM_Lcd_Easy_Gpio_Init 0958                            ___param_bank 000000  
             __size_of_FM_Lcd_Easy_Init 002A                                   ?_main 0001  
           __end_of_FM_Lcd_Send_Command 0958                                   _TRISD 000F95  
                                 tablat 000FF5                                   status 000FD8  
                       __initialization 0932                            __end_of_main 0908  
                                ??_main 000B                           __activetblptr 000001  
         FM_Lcd_Easy_Send_String@cadena 0006        __size_of_FM_Lcd_Easy_Send_String 0050  
                ?_FM_Lcd_Easy_Gpio_Init 0001                                  isa$std 000001  
                          __mediumconst 0000                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                            __accesstop 0060                 __end_of__initialization 0932  
                         ___rparam_used 000001                         _Init_Led_System 0960  
                        __pcstackCOMRAM 0001                        _FM_Lcd_Easy_Init 0908  
        __size_of_FM_Lcd_Send_Character 000C           __end_of_FM_Lcd_Send_Character 094C  
                    _FM_Lcd_Send_Nibble 0808                     ?_FM_Lcd_Send_Nibble 0001  
               __end_of_Init_Led_System 0966                 _FM_Lcd_Easy_Send_String 087C  
                  ??_FM_Lcd_Send_Nibble 0001                                 __Hparam 0000  
                               __Lparam 0000                            __psmallconst 0800  
                               __pcinit 0932                                 __ramtop 0800  
                               __ptext0 08CC                                 __ptext1 0960  
                               __ptext2 087C                                 __ptext3 0940  
                               __ptext4 0908                                 __ptext5 094C  
                               __ptext6 0808                                 __ptext7 0958  
          __size_of_FM_Lcd_Send_Command 000C                    end_of_initialization 0932  
               ??_FM_Lcd_Easy_Gpio_Init 0001               ??_FM_Lcd_Easy_Send_String 0008  
                      ?_Init_Led_System 0001                __end_of_FM_Lcd_Easy_Init 0932  
                   start_initialization 0932                   _FM_Lcd_Send_Character 0940  
                   _FM_Lcd_Send_Command 094C      FM_Lcd_Send_Command@command_to_send 0005  
                           __smallconst 0800                    ?_FM_Lcd_Send_Command 0001  
           __size_of_FM_Lcd_Send_Nibble 0074          __size_of_FM_Lcd_Easy_Gpio_Init 0008  
         __end_of_FM_Lcd_Easy_Gpio_Init 0960                   ??_FM_Lcd_Send_Command 0005  
                     ?_FM_Lcd_Easy_Init 0001            FM_Lcd_Easy_Send_String@index 000A  
                    ??_FM_Lcd_Easy_Init 0006                                __Hrparam 0000  
                ?_FM_Lcd_Send_Character 0001                                __Lrparam 0000  
                          __Lsmallconst 0800                           __size_of_main 003C  
              __size_of_Init_Led_System 0006                                isa$xinst 000000  
              ?_FM_Lcd_Easy_Send_String 0006          FM_Lcd_Send_Nibble@byte_to_send 0002  
          FM_Lcd_Send_Nibble@lower_bits 0004  
