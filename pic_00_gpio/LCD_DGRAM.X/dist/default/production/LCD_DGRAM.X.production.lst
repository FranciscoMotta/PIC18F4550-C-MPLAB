

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Fri May 26 19:10:45 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    24   000000                     
    25                           ; Version 2.40
    26                           ; Generated 17/11/2021 GMT
    27                           ; 
    28                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4550 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60   000000                     
    61                           	psect	idataCOMRAM
    62   0009E0                     __pidataCOMRAM:
    63                           	callstack 0
    64                           
    65                           ;initializer for _caracter
    66   0009E0  04                 	db	4
    67   0009E1  0E                 	db	14
    68   0009E2  0E                 	db	14
    69   0009E3  1F                 	db	31
    70   0009E4  04                 	db	4
    71   0009E5  04                 	db	4
    72   0009E6  0E                 	db	14
    73   0009E7  00                 	db	0
    74   000000                     _TRISDbits	set	3989
    75   000000                     _OSCCONbits	set	4051
    76   000000                     _PORTDbits	set	3971
    77   000000                     _LATCbits	set	3979
    78   000000                     _LATD	set	3980
    79   000000                     _TRISCbits	set	3988
    80   000000                     _TRISD	set	3989
    81   000000                     _OSCCON	set	4051
    82                           
    83                           	psect	smallconst
    84   000800                     __psmallconst:
    85                           	callstack 0
    86   000800  00                 	db	0
    87   000801                     STR_1:
    88   000801  48                 	db	72	;'H'
    89   000802  4F                 	db	79	;'O'
    90   000803  4C                 	db	76	;'L'
    91   000804  49                 	db	73	;'I'
    92   000805  00                 	db	0
    93   000806  00                 	db	0	; dummy byte at the end
    94   000000                     
    95                           ; #config settings
    96                           
    97                           	psect	cinit
    98   000948                     __pcinit:
    99                           	callstack 0
   100   000948                     start_initialization:
   101                           	callstack 0
   102   000948                     __initialization:
   103                           	callstack 0
   104                           
   105                           ; Initialize objects allocated to COMRAM (8 bytes)
   106                           ; load TBLPTR registers with __pidataCOMRAM
   107   000948  0EE0               	movlw	low __pidataCOMRAM
   108   00094A  6EF6               	movwf	tblptrl,c
   109   00094C  0E09               	movlw	high __pidataCOMRAM
   110   00094E  6EF7               	movwf	tblptrh,c
   111   000950  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   112   000952  6EF8               	movwf	tblptru,c
   113   000954  EE00  F00C         	lfsr	0,__pdataCOMRAM
   114   000958  EE10 F008          	lfsr	1,8
   115   00095C                     copy_data0:
   116   00095C  0009               	tblrd		*+
   117   00095E  CFF5 FFEE          	movff	tablat,postinc0
   118   000962  50E5               	movf	postdec1,w,c
   119   000964  50E1               	movf	fsr1l,w,c
   120   000966  E1FA               	bnz	copy_data0
   121   000968                     end_of_initialization:
   122                           	callstack 0
   123   000968                     __end_of__initialization:
   124                           	callstack 0
   125   000968  0E00               	movlw	low (__Lsmallconst shr (0+16))
   126   00096A  6EF8               	movwf	tblptru,c
   127   00096C  0E08               	movlw	high __Lsmallconst
   128   00096E  6EF7               	movwf	tblptrh,c
   129   000970  0100               	movlb	0
   130   000972  EF65  F004         	goto	_main	;jump to C main() function
   131                           
   132                           	psect	dataCOMRAM
   133   00000C                     __pdataCOMRAM:
   134                           	callstack 0
   135   00000C                     _caracter:
   136                           	callstack 0
   137   00000C                     	ds	8
   138                           
   139                           	psect	cstackCOMRAM
   140   000001                     __pcstackCOMRAM:
   141                           	callstack 0
   142   000001                     ??_Lcd_Send_Nibble:
   143   000001                     
   144                           ; 2 bytes @ 0x0
   145   000001                     	ds	1
   146   000002                     Lcd_Send_Nibble@byte:
   147                           	callstack 0
   148                           
   149                           ; 1 bytes @ 0x1
   150   000002                     	ds	1
   151   000003                     Lcd_Send_Nibble@upper_bits:
   152                           	callstack 0
   153                           
   154                           ; 1 bytes @ 0x2
   155   000003                     	ds	1
   156   000004                     Lcd_Send_Nibble@lower_bits:
   157                           	callstack 0
   158                           
   159                           ; 1 bytes @ 0x3
   160   000004                     	ds	1
   161   000005                     Lcd_Send_Command@command:
   162                           	callstack 0
   163   000005                     Lcd_Send_Character@character:
   164                           	callstack 0
   165                           
   166                           ; 1 bytes @ 0x4
   167   000005                     	ds	1
   168   000006                     Lcd_Set_Cursor_XY@columna:
   169                           	callstack 0
   170   000006                     Lcd_Send_String@cadena:
   171                           	callstack 0
   172   000006                     Lcd_Save_Character@caracter:
   173                           	callstack 0
   174                           
   175                           ; 2 bytes @ 0x5
   176   000006                     	ds	1
   177   000007                     Lcd_Set_Cursor_XY@fila:
   178                           	callstack 0
   179                           
   180                           ; 1 bytes @ 0x6
   181   000007                     	ds	1
   182   000008                     ??_Lcd_Send_String:
   183   000008                     Lcd_Save_Character@dir:
   184                           	callstack 0
   185                           
   186                           ; 1 bytes @ 0x7
   187   000008                     	ds	1
   188   000009                     Lcd_Save_Character@index:
   189                           	callstack 0
   190                           
   191                           ; 1 bytes @ 0x8
   192   000009                     	ds	1
   193   00000A                     Lcd_Send_String@string_index:
   194                           	callstack 0
   195                           
   196                           ; 2 bytes @ 0x9
   197   00000A                     	ds	2
   198   00000C                     
   199                           ; 1 bytes @ 0xB
   200 ;;
   201 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   202 ;;
   203 ;; *************** function _main *****************
   204 ;; Defined at:
   205 ;;		line 29 in file "main.c"
   206 ;; Parameters:    Size  Location     Type
   207 ;;		None
   208 ;; Auto vars:     Size  Location     Type
   209 ;;		None
   210 ;; Return value:  Size  Location     Type
   211 ;;                  2   22[None  ] int 
   212 ;; Registers used:
   213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   214 ;; Tracked objects:
   215 ;;		On entry : 0/0
   216 ;;		On exit  : 0/0
   217 ;;		Unchanged: 0/0
   218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   219 ;;      Params:         0       0       0       0       0       0       0       0       0
   220 ;;      Locals:         0       0       0       0       0       0       0       0       0
   221 ;;      Temps:          0       0       0       0       0       0       0       0       0
   222 ;;      Totals:         0       0       0       0       0       0       0       0       0
   223 ;;Total ram usage:        0 bytes
   224 ;; Hardware stack levels required when called: 3
   225 ;; This function calls:
   226 ;;		_Init_Internal_Oscillator
   227 ;;		_Init_Lcd_16x2
   228 ;;		_Lcd_Save_Character
   229 ;;		_Lcd_Send_Character
   230 ;;		_Lcd_Send_String
   231 ;;		_Lcd_Set_Cursor_XY
   232 ;; This function is called by:
   233 ;;		Startup code after reset
   234 ;; This function uses a non-reentrant model
   235 ;;
   236                           
   237                           	psect	text0
   238   0008CA                     __ptext0:
   239                           	callstack 0
   240   0008CA                     _main:
   241                           	callstack 28
   242   0008CA                     
   243                           ;main.c: 32:     Init_Internal_Oscillator();
   244   0008CA  ECD1  F004         	call	_Init_Internal_Oscillator	;wreg free
   245   0008CE                     
   246                           ;main.c: 34:     Init_Lcd_16x2();
   247   0008CE  ECBB  F004         	call	_Init_Lcd_16x2	;wreg free
   248   0008D2                     
   249                           ;main.c: 36:     Lcd_Save_Character(dir_0, caracter);
   250   0008D2  0E0C               	movlw	low _caracter
   251   0008D4  6E06               	movwf	Lcd_Save_Character@caracter^0,c
   252   0008D6  0E00               	movlw	high _caracter
   253   0008D8  6E07               	movwf	(Lcd_Save_Character@caracter+1)^0,c
   254   0008DA  0E00               	movlw	0
   255   0008DC  EC87  F004         	call	_Lcd_Save_Character
   256   0008E0                     
   257                           ;main.c: 38:     Lcd_Set_Cursor_XY(ROW_1, COL_1);
   258   0008E0  0E00               	movlw	0
   259   0008E2  6E06               	movwf	Lcd_Set_Cursor_XY@columna^0,c
   260   0008E4  0E80               	movlw	128
   261   0008E6  ECD8  F004         	call	_Lcd_Set_Cursor_XY
   262   0008EA                     
   263                           ;main.c: 40:     Lcd_Send_String("HOLI");
   264   0008EA  0E01               	movlw	low STR_1
   265   0008EC  6E06               	movwf	Lcd_Send_String@cadena^0,c
   266   0008EE  0E08               	movlw	high STR_1
   267   0008F0  6E07               	movwf	(Lcd_Send_String@cadena+1)^0,c
   268   0008F2  EC3A  F004         	call	_Lcd_Send_String	;wreg free
   269   0008F6                     
   270                           ;main.c: 42:     Lcd_Set_Cursor_XY(ROW_2, COL_2);
   271   0008F6  0E01               	movlw	1
   272   0008F8  6E06               	movwf	Lcd_Set_Cursor_XY@columna^0,c
   273   0008FA  0EC0               	movlw	192
   274   0008FC  ECD8  F004         	call	_Lcd_Set_Cursor_XY
   275   000900                     
   276                           ;main.c: 43:     Lcd_Send_Character(0);
   277   000900  0E00               	movlw	0
   278   000902  ECDE  F004         	call	_Lcd_Send_Character
   279   000906                     l23:
   280   000906  EF83  F004         	goto	l23
   281   00090A  EF00  F000         	goto	start
   282   00090E                     __end_of_main:
   283                           	callstack 0
   284                           
   285 ;; *************** function _Lcd_Set_Cursor_XY *****************
   286 ;; Defined at:
   287 ;;		line 71 in file "lcd_16x2.c"
   288 ;; Parameters:    Size  Location     Type
   289 ;;  fila            1    wreg     enum E3201
   290 ;;  columna         1    5[COMRAM] enum E3205
   291 ;; Auto vars:     Size  Location     Type
   292 ;;  fila            1    6[COMRAM] enum E3201
   293 ;; Return value:  Size  Location     Type
   294 ;;                  1    wreg      void 
   295 ;; Registers used:
   296 ;;		wreg, status,2, status,0, cstack
   297 ;; Tracked objects:
   298 ;;		On entry : 0/0
   299 ;;		On exit  : 0/0
   300 ;;		Unchanged: 0/0
   301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   302 ;;      Params:         1       0       0       0       0       0       0       0       0
   303 ;;      Locals:         1       0       0       0       0       0       0       0       0
   304 ;;      Temps:          0       0       0       0       0       0       0       0       0
   305 ;;      Totals:         2       0       0       0       0       0       0       0       0
   306 ;;Total ram usage:        2 bytes
   307 ;; Hardware stack levels used: 1
   308 ;; Hardware stack levels required when called: 2
   309 ;; This function calls:
   310 ;;		_Lcd_Send_Command
   311 ;; This function is called by:
   312 ;;		_main
   313 ;; This function uses a non-reentrant model
   314 ;;
   315                           
   316                           	psect	text1
   317   0009B0                     __ptext1:
   318                           	callstack 0
   319   0009B0                     _Lcd_Set_Cursor_XY:
   320                           	callstack 28
   321                           
   322                           ;incstack = 0
   323                           ;Lcd_Set_Cursor_XY@fila stored from wreg
   324   0009B0  6E07               	movwf	Lcd_Set_Cursor_XY@fila^0,c
   325   0009B2                     
   326                           ;lcd_16x2.c: 71: void Lcd_Set_Cursor_XY (_row_t fila, _column_t columna);lcd_16x2.c: 72:
      +                           {;lcd_16x2.c: 73:     Lcd_Send_Command(fila + columna);
   327   0009B2  5007               	movf	Lcd_Set_Cursor_XY@fila^0,w,c
   328   0009B4  2406               	addwf	Lcd_Set_Cursor_XY@columna^0,w,c
   329   0009B6  ECE4  F004         	call	_Lcd_Send_Command
   330   0009BA  0012               	return		;funcret
   331   0009BC                     __end_of_Lcd_Set_Cursor_XY:
   332                           	callstack 0
   333                           
   334 ;; *************** function _Lcd_Send_String *****************
   335 ;; Defined at:
   336 ;;		line 76 in file "lcd_16x2.c"
   337 ;; Parameters:    Size  Location     Type
   338 ;;  cadena          2    5[COMRAM] PTR unsigned char 
   339 ;;		 -> STR_1(5), 
   340 ;; Auto vars:     Size  Location     Type
   341 ;;  string_index    2    9[COMRAM] unsigned short 
   342 ;; Return value:  Size  Location     Type
   343 ;;                  1    wreg      void 
   344 ;; Registers used:
   345 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   346 ;; Tracked objects:
   347 ;;		On entry : 0/0
   348 ;;		On exit  : 0/0
   349 ;;		Unchanged: 0/0
   350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   351 ;;      Params:         2       0       0       0       0       0       0       0       0
   352 ;;      Locals:         2       0       0       0       0       0       0       0       0
   353 ;;      Temps:          2       0       0       0       0       0       0       0       0
   354 ;;      Totals:         6       0       0       0       0       0       0       0       0
   355 ;;Total ram usage:        6 bytes
   356 ;; Hardware stack levels used: 1
   357 ;; Hardware stack levels required when called: 2
   358 ;; This function calls:
   359 ;;		_Lcd_Send_Character
   360 ;; This function is called by:
   361 ;;		_main
   362 ;; This function uses a non-reentrant model
   363 ;;
   364                           
   365                           	psect	text2
   366   000874                     __ptext2:
   367                           	callstack 0
   368   000874                     _Lcd_Send_String:
   369                           	callstack 28
   370   000874                     
   371                           ;lcd_16x2.c: 76: void Lcd_Send_String (char *cadena);lcd_16x2.c: 77: {;lcd_16x2.c: 78:  
      +                             uint16_t string_index = 0;
   372   000874  0E00               	movlw	0
   373   000876  6E0B               	movwf	(Lcd_Send_String@string_index+1)^0,c
   374   000878  0E00               	movlw	0
   375   00087A  6E0A               	movwf	Lcd_Send_String@string_index^0,c
   376                           
   377                           ;lcd_16x2.c: 79:     while(cadena[string_index] != '\0')
   378   00087C  EF50  F004         	goto	l904
   379   000880                     l900:
   380                           
   381                           ;lcd_16x2.c: 80:     {;lcd_16x2.c: 81:         Lcd_Send_Character(cadena[string_index]);
   382   000880  500A               	movf	Lcd_Send_String@string_index^0,w,c
   383   000882  2406               	addwf	Lcd_Send_String@cadena^0,w,c
   384   000884  6E08               	movwf	??_Lcd_Send_String^0,c
   385   000886  500B               	movf	(Lcd_Send_String@string_index+1)^0,w,c
   386   000888  2007               	addwfc	(Lcd_Send_String@cadena+1)^0,w,c
   387   00088A  6E09               	movwf	(??_Lcd_Send_String+1)^0,c
   388   00088C  C008  FFF6         	movff	??_Lcd_Send_String,tblptrl
   389   000890  C009  FFF7         	movff	??_Lcd_Send_String+1,tblptrh
   390   000894                     	if	0	;tblptru may be non-zero
   391   000894                     	endif
   392   000894                     	if	0	;tblptru may be non-zero
   393   000894                     	endif
   394   000894  0008               	tblrd		*
   395   000896  50F5               	movf	tablat,w,c
   396   000898  ECDE  F004         	call	_Lcd_Send_Character
   397   00089C                     
   398                           ;lcd_16x2.c: 82:         string_index++;
   399   00089C  4A0A               	infsnz	Lcd_Send_String@string_index^0,f,c
   400   00089E  2A0B               	incf	(Lcd_Send_String@string_index+1)^0,f,c
   401   0008A0                     l904:
   402                           
   403                           ;lcd_16x2.c: 79:     while(cadena[string_index] != '\0')
   404   0008A0  500A               	movf	Lcd_Send_String@string_index^0,w,c
   405   0008A2  2406               	addwf	Lcd_Send_String@cadena^0,w,c
   406   0008A4  6E08               	movwf	??_Lcd_Send_String^0,c
   407   0008A6  500B               	movf	(Lcd_Send_String@string_index+1)^0,w,c
   408   0008A8  2007               	addwfc	(Lcd_Send_String@cadena+1)^0,w,c
   409   0008AA  6E09               	movwf	(??_Lcd_Send_String+1)^0,c
   410   0008AC  C008  FFF6         	movff	??_Lcd_Send_String,tblptrl
   411   0008B0  C009  FFF7         	movff	??_Lcd_Send_String+1,tblptrh
   412   0008B4                     	if	0	;tblptru may be non-zero
   413   0008B4                     	endif
   414   0008B4                     	if	0	;tblptru may be non-zero
   415   0008B4                     	endif
   416   0008B4  0008               	tblrd		*
   417   0008B6  50F5               	movf	tablat,w,c
   418   0008B8  0900               	iorlw	0
   419   0008BA  A4D8               	btfss	status,2,c
   420   0008BC  EF62  F004         	goto	u51
   421   0008C0  EF64  F004         	goto	u50
   422   0008C4                     u51:
   423   0008C4  EF40  F004         	goto	l900
   424   0008C8                     u50:
   425   0008C8  0012               	return		;funcret
   426   0008CA                     __end_of_Lcd_Send_String:
   427                           	callstack 0
   428                           
   429 ;; *************** function _Lcd_Save_Character *****************
   430 ;; Defined at:
   431 ;;		line 101 in file "lcd_16x2.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;  dir             1    wreg     enum E3227
   434 ;;  caracter        2    5[COMRAM] PTR unsigned char 
   435 ;;		 -> caracter(8), 
   436 ;; Auto vars:     Size  Location     Type
   437 ;;  dir             1    7[COMRAM] enum E3227
   438 ;;  index           1    8[COMRAM] unsigned char 
   439 ;; Return value:  Size  Location     Type
   440 ;;                  1    wreg      void 
   441 ;; Registers used:
   442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   443 ;; Tracked objects:
   444 ;;		On entry : 0/0
   445 ;;		On exit  : 0/0
   446 ;;		Unchanged: 0/0
   447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   448 ;;      Params:         2       0       0       0       0       0       0       0       0
   449 ;;      Locals:         2       0       0       0       0       0       0       0       0
   450 ;;      Temps:          0       0       0       0       0       0       0       0       0
   451 ;;      Totals:         4       0       0       0       0       0       0       0       0
   452 ;;Total ram usage:        4 bytes
   453 ;; Hardware stack levels used: 1
   454 ;; Hardware stack levels required when called: 2
   455 ;; This function calls:
   456 ;;		_Lcd_Send_Character
   457 ;;		_Lcd_Send_Command
   458 ;; This function is called by:
   459 ;;		_main
   460 ;; This function uses a non-reentrant model
   461 ;;
   462                           
   463                           	psect	text3
   464   00090E                     __ptext3:
   465                           	callstack 0
   466   00090E                     _Lcd_Save_Character:
   467                           	callstack 28
   468                           
   469                           ;incstack = 0
   470                           ;Lcd_Save_Character@dir stored from wreg
   471   00090E  6E08               	movwf	Lcd_Save_Character@dir^0,c
   472   000910                     
   473                           ;lcd_16x2.c: 101: void Lcd_Save_Character (_dir_to_save_t dir, char *caracter);lcd_16x2.
      +                          c: 102: {;lcd_16x2.c: 103:     Lcd_Send_Command(0X40 + dir);
   474   000910  5008               	movf	Lcd_Save_Character@dir^0,w,c
   475   000912  0F40               	addlw	64
   476   000914  ECE4  F004         	call	_Lcd_Send_Command
   477   000918                     
   478                           ;lcd_16x2.c: 104:     uint8_t index;;lcd_16x2.c: 105:     for(index = 0 ; index < 8 ; in
      +                          dex++)
   479   000918  0E00               	movlw	0
   480   00091A  6E09               	movwf	Lcd_Save_Character@index^0,c
   481   00091C                     l888:
   482                           
   483                           ;lcd_16x2.c: 106:     {;lcd_16x2.c: 107:         Lcd_Send_Character(caracter[index]);
   484   00091C  5009               	movf	Lcd_Save_Character@index^0,w,c
   485   00091E  2406               	addwf	Lcd_Save_Character@caracter^0,w,c
   486   000920  6ED9               	movwf	fsr2l,c
   487   000922  0E00               	movlw	0
   488   000924  2007               	addwfc	(Lcd_Save_Character@caracter+1)^0,w,c
   489   000926  6EDA               	movwf	fsr2h,c
   490   000928  50DF               	movf	indf2,w,c
   491   00092A  ECDE  F004         	call	_Lcd_Send_Character
   492   00092E                     
   493                           ;lcd_16x2.c: 108:     }
   494   00092E  2A09               	incf	Lcd_Save_Character@index^0,f,c
   495   000930  0E07               	movlw	7
   496   000932  6409               	cpfsgt	Lcd_Save_Character@index^0,c
   497   000934  EF9E  F004         	goto	u41
   498   000938  EFA0  F004         	goto	u40
   499   00093C                     u41:
   500   00093C  EF8E  F004         	goto	l888
   501   000940                     u40:
   502   000940                     
   503                           ;lcd_16x2.c: 109:     Lcd_Send_Command(0x80);
   504   000940  0E80               	movlw	128
   505   000942  ECE4  F004         	call	_Lcd_Send_Command
   506   000946  0012               	return		;funcret
   507   000948                     __end_of_Lcd_Save_Character:
   508                           	callstack 0
   509                           
   510 ;; *************** function _Lcd_Send_Character *****************
   511 ;; Defined at:
   512 ;;		line 39 in file "lcd_16x2.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;  character       1    wreg     unsigned char 
   515 ;; Auto vars:     Size  Location     Type
   516 ;;  character       1    4[COMRAM] unsigned char 
   517 ;; Return value:  Size  Location     Type
   518 ;;                  1    wreg      void 
   519 ;; Registers used:
   520 ;;		wreg, status,2, status,0, cstack
   521 ;; Tracked objects:
   522 ;;		On entry : 0/0
   523 ;;		On exit  : 0/0
   524 ;;		Unchanged: 0/0
   525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   526 ;;      Params:         0       0       0       0       0       0       0       0       0
   527 ;;      Locals:         1       0       0       0       0       0       0       0       0
   528 ;;      Temps:          0       0       0       0       0       0       0       0       0
   529 ;;      Totals:         1       0       0       0       0       0       0       0       0
   530 ;;Total ram usage:        1 bytes
   531 ;; Hardware stack levels used: 1
   532 ;; Hardware stack levels required when called: 1
   533 ;; This function calls:
   534 ;;		_Lcd_Send_Nibble
   535 ;; This function is called by:
   536 ;;		_main
   537 ;;		_Lcd_Send_String
   538 ;;		_Lcd_Save_Character
   539 ;; This function uses a non-reentrant model
   540 ;;
   541                           
   542                           	psect	text4
   543   0009BC                     __ptext4:
   544                           	callstack 0
   545   0009BC                     _Lcd_Send_Character:
   546                           	callstack 28
   547                           
   548                           ;incstack = 0
   549                           ;Lcd_Send_Character@character stored from wreg
   550   0009BC  6E05               	movwf	Lcd_Send_Character@character^0,c
   551   0009BE                     
   552                           ;lcd_16x2.c: 39: void Lcd_Send_Character (char character);lcd_16x2.c: 40: {;lcd_16x2.c: 
      +                          41:     LATCbits.LATC0 = 1;;
   553   0009BE  808B               	bsf	139,0,c	;volatile
   554   0009C0                     
   555                           ;lcd_16x2.c: 42:     Lcd_Send_Nibble(character);
   556   0009C0  5005               	movf	Lcd_Send_Character@character^0,w,c
   557   0009C2  EC04  F004         	call	_Lcd_Send_Nibble
   558   0009C6  0012               	return		;funcret
   559   0009C8                     __end_of_Lcd_Send_Character:
   560                           	callstack 0
   561                           
   562 ;; *************** function _Init_Lcd_16x2 *****************
   563 ;; Defined at:
   564 ;;		line 57 in file "lcd_16x2.c"
   565 ;; Parameters:    Size  Location     Type
   566 ;;		None
   567 ;; Auto vars:     Size  Location     Type
   568 ;;		None
   569 ;; Return value:  Size  Location     Type
   570 ;;                  1    wreg      void 
   571 ;; Registers used:
   572 ;;		wreg, status,2, status,0, cstack
   573 ;; Tracked objects:
   574 ;;		On entry : 0/0
   575 ;;		On exit  : 0/0
   576 ;;		Unchanged: 0/0
   577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   578 ;;      Params:         0       0       0       0       0       0       0       0       0
   579 ;;      Locals:         0       0       0       0       0       0       0       0       0
   580 ;;      Temps:          0       0       0       0       0       0       0       0       0
   581 ;;      Totals:         0       0       0       0       0       0       0       0       0
   582 ;;Total ram usage:        0 bytes
   583 ;; Hardware stack levels used: 1
   584 ;; Hardware stack levels required when called: 2
   585 ;; This function calls:
   586 ;;		_Init_Lcd_Gpio
   587 ;;		_Lcd_Send_Command
   588 ;; This function is called by:
   589 ;;		_main
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           	psect	text5
   594   000976                     __ptext5:
   595                           	callstack 0
   596   000976                     _Init_Lcd_16x2:
   597                           	callstack 28
   598   000976                     
   599                           ;lcd_16x2.c: 60:     Init_Lcd_Gpio();
   600   000976  ECEA  F004         	call	_Init_Lcd_Gpio	;wreg free
   601   00097A                     
   602                           ;lcd_16x2.c: 61:     LATCbits.LATC2 = 0;;
   603   00097A  948B               	bcf	139,2,c	;volatile
   604   00097C                     
   605                           ;lcd_16x2.c: 63:     Lcd_Send_Command(0x01);
   606   00097C  0E01               	movlw	1
   607   00097E  ECE4  F004         	call	_Lcd_Send_Command
   608   000982                     
   609                           ;lcd_16x2.c: 64:     Lcd_Send_Command(0x02);
   610   000982  0E02               	movlw	2
   611   000984  ECE4  F004         	call	_Lcd_Send_Command
   612   000988                     
   613                           ;lcd_16x2.c: 65:     Lcd_Send_Command(0x28);
   614   000988  0E28               	movlw	40
   615   00098A  ECE4  F004         	call	_Lcd_Send_Command
   616   00098E                     
   617                           ;lcd_16x2.c: 66:     Lcd_Send_Command(0x06);
   618   00098E  0E06               	movlw	6
   619   000990  ECE4  F004         	call	_Lcd_Send_Command
   620   000994                     
   621                           ;lcd_16x2.c: 67:     Lcd_Send_Command(0x0C);
   622   000994  0E0C               	movlw	12
   623   000996  ECE4  F004         	call	_Lcd_Send_Command
   624   00099A                     
   625                           ;lcd_16x2.c: 68:     Lcd_Send_Command(0x02);
   626   00099A  0E02               	movlw	2
   627   00099C  ECE4  F004         	call	_Lcd_Send_Command
   628   0009A0  0012               	return		;funcret
   629   0009A2                     __end_of_Init_Lcd_16x2:
   630                           	callstack 0
   631                           
   632 ;; *************** function _Lcd_Send_Command *****************
   633 ;; Defined at:
   634 ;;		line 33 in file "lcd_16x2.c"
   635 ;; Parameters:    Size  Location     Type
   636 ;;  command         1    wreg     unsigned char 
   637 ;; Auto vars:     Size  Location     Type
   638 ;;  command         1    4[COMRAM] unsigned char 
   639 ;; Return value:  Size  Location     Type
   640 ;;                  1    wreg      void 
   641 ;; Registers used:
   642 ;;		wreg, status,2, status,0, cstack
   643 ;; Tracked objects:
   644 ;;		On entry : 0/0
   645 ;;		On exit  : 0/0
   646 ;;		Unchanged: 0/0
   647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   648 ;;      Params:         0       0       0       0       0       0       0       0       0
   649 ;;      Locals:         1       0       0       0       0       0       0       0       0
   650 ;;      Temps:          0       0       0       0       0       0       0       0       0
   651 ;;      Totals:         1       0       0       0       0       0       0       0       0
   652 ;;Total ram usage:        1 bytes
   653 ;; Hardware stack levels used: 1
   654 ;; Hardware stack levels required when called: 1
   655 ;; This function calls:
   656 ;;		_Lcd_Send_Nibble
   657 ;; This function is called by:
   658 ;;		_Init_Lcd_16x2
   659 ;;		_Lcd_Set_Cursor_XY
   660 ;;		_Lcd_Save_Character
   661 ;;		_Lcd_Shift_Text
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           	psect	text6
   666   0009C8                     __ptext6:
   667                           	callstack 0
   668   0009C8                     _Lcd_Send_Command:
   669                           	callstack 28
   670                           
   671                           ;incstack = 0
   672                           ;Lcd_Send_Command@command stored from wreg
   673   0009C8  6E05               	movwf	Lcd_Send_Command@command^0,c
   674   0009CA                     
   675                           ;lcd_16x2.c: 33: void Lcd_Send_Command (char command);lcd_16x2.c: 34: {;lcd_16x2.c: 35: 
      +                              LATCbits.LATC0 = 0;;
   676   0009CA  908B               	bcf	139,0,c	;volatile
   677   0009CC                     
   678                           ;lcd_16x2.c: 36:     Lcd_Send_Nibble(command);
   679   0009CC  5005               	movf	Lcd_Send_Command@command^0,w,c
   680   0009CE  EC04  F004         	call	_Lcd_Send_Nibble
   681   0009D2  0012               	return		;funcret
   682   0009D4                     __end_of_Lcd_Send_Command:
   683                           	callstack 0
   684                           
   685 ;; *************** function _Lcd_Send_Nibble *****************
   686 ;; Defined at:
   687 ;;		line 15 in file "lcd_16x2.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;  byte            1    wreg     unsigned char 
   690 ;; Auto vars:     Size  Location     Type
   691 ;;  byte            1    1[COMRAM] unsigned char 
   692 ;;  lower_bits      1    3[COMRAM] unsigned char 
   693 ;;  upper_bits      1    2[COMRAM] unsigned char 
   694 ;; Return value:  Size  Location     Type
   695 ;;                  1    wreg      void 
   696 ;; Registers used:
   697 ;;		wreg, status,2, status,0
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   703 ;;      Params:         0       0       0       0       0       0       0       0       0
   704 ;;      Locals:         3       0       0       0       0       0       0       0       0
   705 ;;      Temps:          1       0       0       0       0       0       0       0       0
   706 ;;      Totals:         4       0       0       0       0       0       0       0       0
   707 ;;Total ram usage:        4 bytes
   708 ;; Hardware stack levels used: 1
   709 ;; This function calls:
   710 ;;		Nothing
   711 ;; This function is called by:
   712 ;;		_Lcd_Send_Command
   713 ;;		_Lcd_Send_Character
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           	psect	text7
   718   000808                     __ptext7:
   719                           	callstack 0
   720   000808                     _Lcd_Send_Nibble:
   721                           	callstack 28
   722                           
   723                           ;incstack = 0
   724                           ;Lcd_Send_Nibble@byte stored from wreg
   725   000808  6E02               	movwf	Lcd_Send_Nibble@byte^0,c
   726   00080A                     
   727                           ;lcd_16x2.c: 18:     upper_bits = byte & 0xF0;
   728   00080A  5002               	movf	Lcd_Send_Nibble@byte^0,w,c
   729   00080C  0BF0               	andlw	240
   730   00080E  6E03               	movwf	Lcd_Send_Nibble@upper_bits^0,c
   731   000810                     
   732                           ;lcd_16x2.c: 19:     lower_bits = (byte & 0x0F) << 4;
   733   000810  C002  F001         	movff	Lcd_Send_Nibble@byte,??_Lcd_Send_Nibble
   734   000814  0E0F               	movlw	15
   735   000816  1601               	andwf	??_Lcd_Send_Nibble^0,f,c
   736   000818  3801               	swapf	??_Lcd_Send_Nibble^0,w,c
   737   00081A  0BF0               	andlw	240
   738   00081C  6E04               	movwf	Lcd_Send_Nibble@lower_bits^0,c
   739   00081E                     
   740                           ;lcd_16x2.c: 23:     LATD |= upper_bits;
   741   00081E  5003               	movf	Lcd_Send_Nibble@upper_bits^0,w,c	;volatile
   742   000820  128C               	iorwf	140,f,c	;volatile
   743   000822                     
   744                           ;lcd_16x2.c: 24:     LATCbits.LATC1 = 1;; _delay((unsigned long)((1)*(8000000UL/4000.0))
      +                          ); LATCbits.LATC1 = 0;; _delay((unsigned long)((1)*(8000000UL/4000.0)));;
   745   000822  828B               	bsf	139,1,c	;volatile
   746   000824  0E03               	movlw	3
   747   000826  6E01               	movwf	??_Lcd_Send_Nibble^0,c
   748   000828  0E98               	movlw	152
   749   00082A                     u67:
   750   00082A  2EE8               	decfsz	wreg,f,c
   751   00082C  D7FE               	bra	u67
   752   00082E  2E01               	decfsz	??_Lcd_Send_Nibble^0,f,c
   753   000830  D7FC               	bra	u67
   754   000832  928B               	bcf	139,1,c	;volatile
   755   000834  0E03               	movlw	3
   756   000836  6E01               	movwf	??_Lcd_Send_Nibble^0,c
   757   000838  0E98               	movlw	152
   758   00083A                     u77:
   759   00083A  2EE8               	decfsz	wreg,f,c
   760   00083C  D7FE               	bra	u77
   761   00083E  2E01               	decfsz	??_Lcd_Send_Nibble^0,f,c
   762   000840  D7FC               	bra	u77
   763   000842                     
   764                           ;lcd_16x2.c: 25:     LATD &= ~upper_bits;
   765   000842  5003               	movf	Lcd_Send_Nibble@upper_bits^0,w,c	;volatile
   766   000844  0AFF               	xorlw	255
   767   000846  168C               	andwf	140,f,c	;volatile
   768   000848                     
   769                           ;lcd_16x2.c: 28:     LATD |= lower_bits;
   770   000848  5004               	movf	Lcd_Send_Nibble@lower_bits^0,w,c	;volatile
   771   00084A  128C               	iorwf	140,f,c	;volatile
   772   00084C                     
   773                           ;lcd_16x2.c: 29:     LATCbits.LATC1 = 1;; _delay((unsigned long)((1)*(8000000UL/4000.0))
      +                          ); LATCbits.LATC1 = 0;; _delay((unsigned long)((1)*(8000000UL/4000.0)));;
   774   00084C  828B               	bsf	139,1,c	;volatile
   775   00084E  0E03               	movlw	3
   776   000850  6E01               	movwf	??_Lcd_Send_Nibble^0,c
   777   000852  0E98               	movlw	152
   778   000854                     u87:
   779   000854  2EE8               	decfsz	wreg,f,c
   780   000856  D7FE               	bra	u87
   781   000858  2E01               	decfsz	??_Lcd_Send_Nibble^0,f,c
   782   00085A  D7FC               	bra	u87
   783   00085C  928B               	bcf	139,1,c	;volatile
   784   00085E  0E03               	movlw	3
   785   000860  6E01               	movwf	??_Lcd_Send_Nibble^0,c
   786   000862  0E98               	movlw	152
   787   000864                     u97:
   788   000864  2EE8               	decfsz	wreg,f,c
   789   000866  D7FE               	bra	u97
   790   000868  2E01               	decfsz	??_Lcd_Send_Nibble^0,f,c
   791   00086A  D7FC               	bra	u97
   792   00086C                     
   793                           ;lcd_16x2.c: 30:     LATD &= ~lower_bits;
   794   00086C  5004               	movf	Lcd_Send_Nibble@lower_bits^0,w,c	;volatile
   795   00086E  0AFF               	xorlw	255
   796   000870  168C               	andwf	140,f,c	;volatile
   797   000872  0012               	return		;funcret
   798   000874                     __end_of_Lcd_Send_Nibble:
   799                           	callstack 0
   800                           
   801 ;; *************** function _Init_Lcd_Gpio *****************
   802 ;; Defined at:
   803 ;;		line 7 in file "lcd_16x2.c"
   804 ;; Parameters:    Size  Location     Type
   805 ;;		None
   806 ;; Auto vars:     Size  Location     Type
   807 ;;		None
   808 ;; Return value:  Size  Location     Type
   809 ;;                  1    wreg      void 
   810 ;; Registers used:
   811 ;;		wreg, status,2
   812 ;; Tracked objects:
   813 ;;		On entry : 0/0
   814 ;;		On exit  : 0/0
   815 ;;		Unchanged: 0/0
   816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   817 ;;      Params:         0       0       0       0       0       0       0       0       0
   818 ;;      Locals:         0       0       0       0       0       0       0       0       0
   819 ;;      Temps:          0       0       0       0       0       0       0       0       0
   820 ;;      Totals:         0       0       0       0       0       0       0       0       0
   821 ;;Total ram usage:        0 bytes
   822 ;; Hardware stack levels used: 1
   823 ;; This function calls:
   824 ;;		Nothing
   825 ;; This function is called by:
   826 ;;		_Init_Lcd_16x2
   827 ;; This function uses a non-reentrant model
   828 ;;
   829                           
   830                           	psect	text8
   831   0009D4                     __ptext8:
   832                           	callstack 0
   833   0009D4                     _Init_Lcd_Gpio:
   834                           	callstack 29
   835   0009D4                     
   836                           ;lcd_16x2.c: 9:     TRISD = 0x00;
   837   0009D4  0E00               	movlw	0
   838   0009D6  6E95               	movwf	149,c	;volatile
   839   0009D8                     
   840                           ;lcd_16x2.c: 10:     TRISCbits.RC0 = 0;
   841   0009D8  9094               	bcf	148,0,c	;volatile
   842   0009DA                     
   843                           ;lcd_16x2.c: 11:     TRISCbits.RC1 = 0;
   844   0009DA  9294               	bcf	148,1,c	;volatile
   845   0009DC                     
   846                           ;lcd_16x2.c: 12:     TRISCbits.RC2 = 0;
   847   0009DC  9494               	bcf	148,2,c	;volatile
   848   0009DE  0012               	return		;funcret
   849   0009E0                     __end_of_Init_Lcd_Gpio:
   850                           	callstack 0
   851                           
   852 ;; *************** function _Init_Internal_Oscillator *****************
   853 ;; Defined at:
   854 ;;		line 54 in file "main.c"
   855 ;; Parameters:    Size  Location     Type
   856 ;;		None
   857 ;; Auto vars:     Size  Location     Type
   858 ;;		None
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, status,2
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   868 ;;      Params:         0       0       0       0       0       0       0       0       0
   869 ;;      Locals:         0       0       0       0       0       0       0       0       0
   870 ;;      Temps:          0       0       0       0       0       0       0       0       0
   871 ;;      Totals:         0       0       0       0       0       0       0       0       0
   872 ;;Total ram usage:        0 bytes
   873 ;; Hardware stack levels used: 1
   874 ;; This function calls:
   875 ;;		Nothing
   876 ;; This function is called by:
   877 ;;		_main
   878 ;; This function uses a non-reentrant model
   879 ;;
   880                           
   881                           	psect	text9
   882   0009A2                     __ptext9:
   883                           	callstack 0
   884   0009A2                     _Init_Internal_Oscillator:
   885                           	callstack 30
   886   0009A2                     
   887                           ;main.c: 57:     OSCCON = 0x00;
   888   0009A2  0E00               	movlw	0
   889   0009A4  6ED3               	movwf	211,c	;volatile
   890                           
   891                           ;main.c: 59:     OSCCONbits.IRCF = 0b111;
   892   0009A6  0E70               	movlw	112
   893   0009A8  12D3               	iorwf	211,f,c	;volatile
   894                           
   895                           ;main.c: 60:     OSCCONbits.SCS = 0B11;
   896   0009AA  0E03               	movlw	3
   897   0009AC  12D3               	iorwf	211,f,c	;volatile
   898   0009AE  0012               	return		;funcret
   899   0009B0                     __end_of_Init_Internal_Oscillator:
   900                           	callstack 0
   901                           
   902                           	psect	rparam
   903   000000                     
   904                           	psect	idloc
   905                           
   906                           ;Config register IDLOC0 @ 0x200000
   907                           ;	unspecified, using default values
   908   200000                     	org	2097152
   909   200000  FF                 	db	255
   910                           
   911                           ;Config register IDLOC1 @ 0x200001
   912                           ;	unspecified, using default values
   913   200001                     	org	2097153
   914   200001  FF                 	db	255
   915                           
   916                           ;Config register IDLOC2 @ 0x200002
   917                           ;	unspecified, using default values
   918   200002                     	org	2097154
   919   200002  FF                 	db	255
   920                           
   921                           ;Config register IDLOC3 @ 0x200003
   922                           ;	unspecified, using default values
   923   200003                     	org	2097155
   924   200003  FF                 	db	255
   925                           
   926                           ;Config register IDLOC4 @ 0x200004
   927                           ;	unspecified, using default values
   928   200004                     	org	2097156
   929   200004  FF                 	db	255
   930                           
   931                           ;Config register IDLOC5 @ 0x200005
   932                           ;	unspecified, using default values
   933   200005                     	org	2097157
   934   200005  FF                 	db	255
   935                           
   936                           ;Config register IDLOC6 @ 0x200006
   937                           ;	unspecified, using default values
   938   200006                     	org	2097158
   939   200006  FF                 	db	255
   940                           
   941                           ;Config register IDLOC7 @ 0x200007
   942                           ;	unspecified, using default values
   943   200007                     	org	2097159
   944   200007  FF                 	db	255
   945                           
   946                           	psect	config
   947                           
   948                           ;Config register CONFIG1L @ 0x300000
   949                           ;	PLL Prescaler Selection bits
   950                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   951                           ;	System Clock Postscaler Selection bits
   952                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   953                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   954                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   955   300000                     	org	3145728
   956   300000  00                 	db	0
   957                           
   958                           ;Config register CONFIG1H @ 0x300001
   959                           ;	Oscillator Selection bits
   960                           ;	FOSC = INTOSC_HS, Internal oscillator, HS oscillator used by USB (INTHS)
   961                           ;	Fail-Safe Clock Monitor Enable bit
   962                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   963                           ;	Internal/External Oscillator Switchover bit
   964                           ;	IESO = OFF, Oscillator Switchover mode disabled
   965   300001                     	org	3145729
   966   300001  0B                 	db	11
   967                           
   968                           ;Config register CONFIG2L @ 0x300002
   969                           ;	Power-up Timer Enable bit
   970                           ;	PWRT = OFF, PWRT disabled
   971                           ;	Brown-out Reset Enable bits
   972                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   973                           ;	Brown-out Reset Voltage bits
   974                           ;	BORV = 3, Minimum setting 2.05V
   975                           ;	USB Voltage Regulator Enable bit
   976                           ;	VREGEN = OFF, USB voltage regulator disabled
   977   300002                     	org	3145730
   978   300002  19                 	db	25
   979                           
   980                           ;Config register CONFIG2H @ 0x300003
   981                           ;	Watchdog Timer Enable bit
   982                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   983                           ;	Watchdog Timer Postscale Select bits
   984                           ;	WDTPS = 32768, 1:32768
   985   300003                     	org	3145731
   986   300003  1E                 	db	30
   987                           
   988                           ; Padding undefined space
   989   300004                     	org	3145732
   990   300004  FF                 	db	255
   991                           
   992                           ;Config register CONFIG3H @ 0x300005
   993                           ;	CCP2 MUX bit
   994                           ;	CCP2MX = OFF, CCP2 input/output is multiplexed with RB3
   995                           ;	PORTB A/D Enable bit
   996                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   997                           ;	Low-Power Timer 1 Oscillator Enable bit
   998                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   999                           ;	MCLR Pin Enable bit
  1000                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1001   300005                     	org	3145733
  1002   300005  80                 	db	128
  1003                           
  1004                           ;Config register CONFIG4L @ 0x300006
  1005                           ;	Stack Full/Underflow Reset Enable bit
  1006                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1007                           ;	Single-Supply ICSP Enable bit
  1008                           ;	LVP = OFF, Single-Supply ICSP disabled
  1009                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1010                           ;	ICPRT = OFF, ICPORT disabled
  1011                           ;	Extended Instruction Set Enable bit
  1012                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1013                           ;	Background Debugger Enable bit
  1014                           ;	DEBUG = 0x1, unprogrammed default
  1015   300006                     	org	3145734
  1016   300006  80                 	db	128
  1017                           
  1018                           ; Padding undefined space
  1019   300007                     	org	3145735
  1020   300007  FF                 	db	255
  1021                           
  1022                           ;Config register CONFIG5L @ 0x300008
  1023                           ;	Code Protection bit
  1024                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1025                           ;	Code Protection bit
  1026                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1027                           ;	Code Protection bit
  1028                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1029                           ;	Code Protection bit
  1030                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1031   300008                     	org	3145736
  1032   300008  0F                 	db	15
  1033                           
  1034                           ;Config register CONFIG5H @ 0x300009
  1035                           ;	Boot Block Code Protection bit
  1036                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1037                           ;	Data EEPROM Code Protection bit
  1038                           ;	CPD = OFF, Data EEPROM is not code-protected
  1039   300009                     	org	3145737
  1040   300009  C0                 	db	192
  1041                           
  1042                           ;Config register CONFIG6L @ 0x30000A
  1043                           ;	Write Protection bit
  1044                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1045                           ;	Write Protection bit
  1046                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1047                           ;	Write Protection bit
  1048                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1049                           ;	Write Protection bit
  1050                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1051   30000A                     	org	3145738
  1052   30000A  0F                 	db	15
  1053                           
  1054                           ;Config register CONFIG6H @ 0x30000B
  1055                           ;	Configuration Register Write Protection bit
  1056                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1057                           ;	Boot Block Write Protection bit
  1058                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1059                           ;	Data EEPROM Write Protection bit
  1060                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1061   30000B                     	org	3145739
  1062   30000B  E0                 	db	224
  1063                           
  1064                           ;Config register CONFIG7L @ 0x30000C
  1065                           ;	Table Read Protection bit
  1066                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1067                           ;	Table Read Protection bit
  1068                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1069                           ;	Table Read Protection bit
  1070                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1071                           ;	Table Read Protection bit
  1072                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1073   30000C                     	org	3145740
  1074   30000C  0F                 	db	15
  1075                           
  1076                           ;Config register CONFIG7H @ 0x30000D
  1077                           ;	Boot Block Table Read Protection bit
  1078                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1079   30000D                     	org	3145741
  1080   30000D  40                 	db	64
  1081                           tosu	equ	0xFFF
  1082                           tosh	equ	0xFFE
  1083                           tosl	equ	0xFFD
  1084                           stkptr	equ	0xFFC
  1085                           pclatu	equ	0xFFB
  1086                           pclath	equ	0xFFA
  1087                           pcl	equ	0xFF9
  1088                           tblptru	equ	0xFF8
  1089                           tblptrh	equ	0xFF7
  1090                           tblptrl	equ	0xFF6
  1091                           tablat	equ	0xFF5
  1092                           prodh	equ	0xFF4
  1093                           prodl	equ	0xFF3
  1094                           indf0	equ	0xFEF
  1095                           postinc0	equ	0xFEE
  1096                           postdec0	equ	0xFED
  1097                           preinc0	equ	0xFEC
  1098                           plusw0	equ	0xFEB
  1099                           fsr0h	equ	0xFEA
  1100                           fsr0l	equ	0xFE9
  1101                           wreg	equ	0xFE8
  1102                           indf1	equ	0xFE7
  1103                           postinc1	equ	0xFE6
  1104                           postdec1	equ	0xFE5
  1105                           preinc1	equ	0xFE4
  1106                           plusw1	equ	0xFE3
  1107                           fsr1h	equ	0xFE2
  1108                           fsr1l	equ	0xFE1
  1109                           bsr	equ	0xFE0
  1110                           indf2	equ	0xFDF
  1111                           postinc2	equ	0xFDE
  1112                           postdec2	equ	0xFDD
  1113                           preinc2	equ	0xFDC
  1114                           plusw2	equ	0xFDB
  1115                           fsr2h	equ	0xFDA
  1116                           fsr2l	equ	0xFD9
  1117                           status	equ	0xFD8

Data Sizes:
    Strings     5
    Constant    0
    Data        8
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     11      19
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_Save_Character@caracter	PTR unsigned char  size(2) Largest target is 8
		 -> caracter(COMRAM[8]), 

    Lcd_Send_String@cadena	PTR unsigned char  size(2) Largest target is 5
		 -> STR_1(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_Send_String
    _Lcd_Set_Cursor_XY->_Lcd_Send_Command
    _Lcd_Send_String->_Lcd_Send_Character
    _Lcd_Save_Character->_Lcd_Send_Character
    _Lcd_Save_Character->_Lcd_Send_Command
    _Lcd_Send_Character->_Lcd_Send_Nibble
    _Init_Lcd_16x2->_Lcd_Send_Command
    _Lcd_Send_Command->_Lcd_Send_Nibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1180
           _Init_Internal_Oscillator
                      _Init_Lcd_16x2
                 _Lcd_Save_Character
                 _Lcd_Send_Character
                    _Lcd_Send_String
                  _Lcd_Set_Cursor_XY
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor_XY                                    2     1      1     301
                                              5 COMRAM     2     1      1
                   _Lcd_Send_Command
 ---------------------------------------------------------------------------------
 (1) _Lcd_Send_String                                      6     4      2     271
                                              5 COMRAM     6     4      2
                 _Lcd_Send_Character
 ---------------------------------------------------------------------------------
 (1) _Lcd_Save_Character                                   4     2      2     398
                                              5 COMRAM     4     2      2
                 _Lcd_Send_Character
                   _Lcd_Send_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_Send_Character                                   1     1      0     105
                                              4 COMRAM     1     1      0
                    _Lcd_Send_Nibble
 ---------------------------------------------------------------------------------
 (1) _Init_Lcd_16x2                                        0     0      0     105
                      _Init_Lcd_Gpio
                   _Lcd_Send_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_Send_Command                                     1     1      0     105
                                              4 COMRAM     1     1      0
                    _Lcd_Send_Nibble
 ---------------------------------------------------------------------------------
 (3) _Lcd_Send_Nibble                                      4     4      0      90
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _Init_Lcd_Gpio                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Internal_Oscillator                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_Internal_Oscillator
   _Init_Lcd_16x2
     _Init_Lcd_Gpio
     _Lcd_Send_Command
       _Lcd_Send_Nibble
   _Lcd_Save_Character
     _Lcd_Send_Character
       _Lcd_Send_Nibble
     _Lcd_Send_Command
   _Lcd_Send_Character
   _Lcd_Send_String
     _Lcd_Send_Character
   _Lcd_Set_Cursor_XY
     _Lcd_Send_Command

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      26        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      B      13       1       20.0%
BITBIGSFRlh         3D      0       0      22        0.0%
BITBIGSFRh          2C      0       0      21        0.0%
BITBIGSFRllll       23      0       0      25        0.0%
BITBIGSFRlllh        7      0       0      24        0.0%
BITBIGSFRllh         7      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      13       3        0.0%
DATA                 0      0      13       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Fri May 26 19:10:45 2023

                              l23 0906                                l24 0906                                l51 0872  
                              l29 09AE                                l54 09D2                                l63 09A0  
                              l48 09DE                                l72 08C8                                l57 09C6  
                              l82 0946                                l66 09BA                                u40 0940  
                              u41 093C                                u50 08C8                                u51 08C4  
                              u67 082A                                u77 083A                                u87 0854  
                              u97 0864       Lcd_Send_Character@character 0005                               l800 09CA  
                             l802 09CC                               l810 097C                               l804 09A2  
                             l820 099A                               l812 0982                               l900 0880  
                             l814 0988                               l806 0976                               l902 089C  
                             l910 08D2                               l760 080A                               l816 098E  
                             l808 097A                               l904 08A0                               l912 08E0  
                             l770 0832                               l762 0810                               l818 0994  
                             l914 08EA                               l906 08CA                               l780 084E  
                             l772 0834                               l764 081E                               l916 08F6  
                             l908 08CE                               l782 085C                               l774 0842  
                             l766 0822                               l758 080A                               l790 09C0  
                             l918 0900                               l792 09D4                               l784 085E  
                             l776 0848                               l768 0824                               l880 0910  
                             l794 09D8                               l786 086C                               l778 084C  
                             l890 092E                               l882 0918                               l796 09DA  
                             l788 09BE                               l892 0930                               l798 09DC  
                             l894 0940                               l888 091C                               l896 09B2  
                             l898 0874                               wreg 0FE8                              STR_1 0801  
                            _LATD 0F8C                              _main 08CA                     _Init_Lcd_16x2 0976  
                            indf2 0FDF                              fsr1l 0FE1                              fsr2l 0FD9  
                            start 0000                     _Init_Lcd_Gpio 09D4                      ___param_bank 0000  
                           ?_main 0001                             _TRISD 0F95                             tablat 0FF5  
                  ?_Init_Lcd_16x2 0001                             status 0FD8                    ?_Init_Lcd_Gpio 0001  
                 __initialization 0948                  _Lcd_Send_Command 09C8                      __end_of_main 090E  
                          ??_main 000C                     __activetblptr 0001             Lcd_Send_String@cadena 0006  
                          _OSCCON 0FD3                            isa$std 0001                      __pdataCOMRAM 000C  
      __end_of_Lcd_Send_Character 09C8                      __mediumconst 0000                            tblptrh 0FF7  
                          tblptrl 0FF6                            tblptru 0FF8                   ??_Init_Lcd_16x2 0006  
      __end_of_Lcd_Save_Character 0948                   ??_Init_Lcd_Gpio 0001                        __accesstop 0060  
         __end_of__initialization 0968                     ___rparam_used 0001                    __pcstackCOMRAM 0001  
               ??_Lcd_Send_Nibble 0001                 _Lcd_Set_Cursor_XY 09B0                 ??_Lcd_Send_String 0008  
              ?_Lcd_Set_Cursor_XY 0006         ?_Init_Internal_Oscillator 0001               ??_Lcd_Set_Cursor_XY 0007  
        __end_of_Lcd_Send_Command 09D4         __end_of_Lcd_Set_Cursor_XY 09BC                           __Hparam 0000  
                         __Lparam 0000       Lcd_Send_String@string_index 000A                      __psmallconst 0800  
                         __pcinit 0948                           __ramtop 0800                           __ptext0 08CA  
                         __ptext1 09B0                           __ptext2 0874                           __ptext3 090E  
                         __ptext4 09BC                           __ptext5 0976                           __ptext6 09C8  
                         __ptext7 0808                           __ptext8 09D4                           __ptext9 09A2  
         Lcd_Send_Command@command 0005              end_of_initialization 0968                           postdec1 0FE5  
                         postinc0 0FEE                         _PORTDbits 0F83                         _TRISCbits 0F94  
                       _TRISDbits 0F95                _Lcd_Send_Character 09BC               Lcd_Send_Nibble@byte 0002  
             ?_Lcd_Send_Character 0001                _Lcd_Save_Character 090E                     __pidataCOMRAM 09E0  
             ?_Lcd_Save_Character 0006               start_initialization 0948              ??_Lcd_Send_Character 0005  
                 _Lcd_Send_Nibble 0808                   _Lcd_Send_String 0874             __end_of_Init_Lcd_16x2 09A2  
            ??_Lcd_Save_Character 0008  __end_of_Init_Internal_Oscillator 09B0             __end_of_Init_Lcd_Gpio 09E0  
           Lcd_Set_Cursor_XY@fila 0007                 ?_Lcd_Send_Command 0001                ??_Lcd_Send_Command 0005  
         __end_of_Lcd_Send_Nibble 0874                       __smallconst 0800           __end_of_Lcd_Send_String 08CA  
                        _LATCbits 0F8B          _Init_Internal_Oscillator 09A2             Lcd_Save_Character@dir 0008  
       Lcd_Send_Nibble@lower_bits 0004                         copy_data0 095C          Lcd_Set_Cursor_XY@columna 0006  
                        __Hrparam 0000                          __Lrparam 0000                      __Lsmallconst 0800  
                ?_Lcd_Send_Nibble 0001                          _caracter 000C                  ?_Lcd_Send_String 0006  
       Lcd_Send_Nibble@upper_bits 0003                          isa$xinst 0000        Lcd_Save_Character@caracter 0006  
                      _OSCCONbits 0FD3           Lcd_Save_Character@index 0009        ??_Init_Internal_Oscillator 0001  
